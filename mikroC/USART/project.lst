;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2011-1-30 20:15:15
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040482  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0482	0x2081CF  	MOV	#2076, WREG15
0x0484	0x227FF0  	MOV	#10239, WREG0
0x0486	0xB7A020  	MOV	WREG, SPLIM
0x0488	0x200010  	MOV	#1, WREG0
0x048A	0xB7A034  	MOV	WREG, PSVPAG
0x048C	0x200040  	MOV	#4, WREG0
0x048E	0xB72044  	IOR	CORCON
;project.c,27 :: 		void main(){
;project.c,32 :: 		TRISB = 0;              // Set PORTB as output (error signalization)
0x0490	0x781F8A  	PUSH	WREG10
0x0492	0x781F8B  	PUSH	WREG11
0x0494	0x781F8C  	PUSH	WREG12
0x0496	0xEF22C6  	CLR	TRISB
;project.c,33 :: 		LATB = 0;
0x0498	0xEF22CA  	CLR	LATB
;project.c,35 :: 		error = Soft_UART_Init(&PORTF, 2, 3, 14400, 0); // Initialize Soft UART at 14400 bps
0x049A	0x20003C  	MOV	#3, WREG12
0x049C	0x20002B  	MOV	#2, WREG11
0x049E	0x202E0A  	MOV	#lo_addr(PORTF), WREG10
0x04A0	0xEF2000  	CLR	WREG0
0x04A2	0x781F80  	PUSH	WREG0
0x04A4	0x238400  	MOV	#14400, WREG0
0x04A6	0x200001  	MOV	#0, WREG1
0x04A8	0xBE9F80  	PUSH.D	WREG0
0x04AA	0x07FF79  	RCALL	_Soft_UART_Init
0x04AC	0xB1006F  	SUB	#6, WREG15
0x04AE	0x208141  	MOV	#lo_addr(_error), WREG1
0x04B0	0x784880  	MOV.B	WREG0, [WREG1]
;project.c,36 :: 		if (error > 0) {
0x04B2	0xE10460  	CP.B	WREG0, #0
0x04B4	0x360004  	BRA LEU	L_main0
L__main15:
;project.c,37 :: 		LATB = error;                                 // Signalize Init error
0x04B6	0x208140  	MOV	#lo_addr(_error), WREG0
0x04B8	0xFB8010  	ZE	[WREG0], WREG0
0x04BA	0xB7A2CA  	MOV	WREG, LATB
;project.c,38 :: 		while(1);                                     // Stop program
L_main1:
0x04BC	0x37FFFF  	BRA	L_main1
;project.c,39 :: 		}
L_main0:
;project.c,40 :: 		Delay_ms(100);
0x04BE	0x2000B8  	MOV	#11, WREG8
0x04C0	0x22C2D7  	MOV	#11309, WREG7
L_main3:
0x04C2	0xED200E  	DEC	WREG7
0x04C4	0x3AFFFE  	BRA NZ	L_main3
0x04C6	0xED2010  	DEC	WREG8
0x04C8	0x3AFFFC  	BRA NZ	L_main3
;project.c,42 :: 		for (i = 'z'; i >= 'A'; i--) {                  // Send bytes from 'z' downto 'A'
0x04CA	0x208151  	MOV	#lo_addr(_i), WREG1
0x04CC	0xB3C7A0  	MOV.B	#122, WREG0
0x04CE	0x784880  	MOV.B	WREG0, [WREG1]
L_main5:
0x04D0	0x208150  	MOV	#lo_addr(_i), WREG0
0x04D2	0x784090  	MOV.B	[WREG0], WREG1
0x04D4	0xB3C410  	MOV.B	#65, WREG0
0x04D6	0xE10C00  	CP.B	WREG1, WREG0
0x04D8	0x39000D  	BRA LTU	L_main6
L__main16:
;project.c,43 :: 		Soft_UART_Write(i);
0x04DA	0x208150  	MOV	#lo_addr(_i), WREG0
0x04DC	0x784510  	MOV.B	[WREG0], WREG10
0x04DE	0x07FEFE  	RCALL	_Soft_UART_Write
;project.c,44 :: 		Delay_ms(100);
0x04E0	0x2000B8  	MOV	#11, WREG8
0x04E2	0x22C2D7  	MOV	#11309, WREG7
L_main8:
0x04E4	0xED200E  	DEC	WREG7
0x04E6	0x3AFFFE  	BRA NZ	L_main8
0x04E8	0xED2010  	DEC	WREG8
0x04EA	0x3AFFFC  	BRA NZ	L_main8
;project.c,42 :: 		for (i = 'z'; i >= 'A'; i--) {                  // Send bytes from 'z' downto 'A'
0x04EC	0xB3C011  	MOV.B	#1, WREG1
0x04EE	0x208150  	MOV	#lo_addr(_i), WREG0
0x04F0	0x10C810  	SUBR.B	WREG1, [WREG0], [WREG0]
;project.c,45 :: 		}
0x04F2	0x37FFEE  	BRA	L_main5
L_main6:
;project.c,47 :: 		while(1) {                                      // Endless loop
L_main10:
;project.c,48 :: 		byte_read = Soft_UART_Read(&error);           // Read byte, then test error flag
0x04F4	0x20814A  	MOV	#lo_addr(_error), WREG10
0x04F6	0x07FE7E  	RCALL	_Soft_UART_Read
0x04F8	0x2081A1  	MOV	#lo_addr(_byte_read), WREG1
0x04FA	0x784880  	MOV.B	WREG0, [WREG1]
;project.c,49 :: 		if (error)                                    // If error was detected
0x04FC	0x208140  	MOV	#lo_addr(_error), WREG0
0x04FE	0xE00410  	CP0.B	[WREG0]
0x0500	0x320004  	BRA Z	L_main12
L__main17:
;project.c,50 :: 		LATB = error;                               //   signal it on PORTB
0x0502	0x208140  	MOV	#lo_addr(_error), WREG0
0x0504	0xFB8010  	ZE	[WREG0], WREG0
0x0506	0xB7A2CA  	MOV	WREG, LATB
0x0508	0x370003  	BRA	L_main13
L_main12:
;project.c,52 :: 		Soft_UART_Write(byte_read);                 // If error was not detected, return byte read
0x050A	0x2081A0  	MOV	#lo_addr(_byte_read), WREG0
0x050C	0x784510  	MOV.B	[WREG0], WREG10
0x050E	0x07FEE6  	RCALL	_Soft_UART_Write
L_main13:
;project.c,53 :: 		}
0x0510	0x37FFF1  	BRA	L_main10
;project.c,54 :: 		}
L_end_main:
L__main18:
0x0512	0x37FFFF  	BRA	L__main18
; end of _main
_Soft_UART_Init:
0x039E	0xFA0004  	LNK	#4
;__Lib_SoftUART.c,153 :: 		
;__Lib_SoftUART.c,157 :: 		
; baud_rate start address is: 12 (W6)
0x03A0	0x97BB3E  	MOV	[WREG14-10], WREG6
0x03A2	0x97BBCE  	MOV	[WREG14-8], WREG7
; inverted start address is: 6 (W3)
0x03A4	0x97B9AE  	MOV	[WREG14-12], WREG3
0x03A6	0x88404A  	MOV	WREG10, __Lib_SoftUART__port_addr
;__Lib_SoftUART.c,158 :: 		
0x03A8	0x208100  	MOV	#lo_addr(__Lib_SoftUART__lat_addr), WREG0
0x03AA	0x450862  	ADD	WREG10, #2, [WREG0]
;__Lib_SoftUART.c,159 :: 		
0x03AC	0x200010  	MOV	#1, WREG0
0x03AE	0xDD010B  	SL	WREG0, WREG11, WREG2
0x03B0	0x884052  	MOV	WREG2, __Lib_SoftUART__rx_mask1
;__Lib_SoftUART.c,160 :: 		
0x03B2	0x208121  	MOV	#lo_addr(__Lib_SoftUART__rx_mask0), WREG1
0x03B4	0x780002  	MOV	WREG2, WREG0
0x03B6	0xEA8880  	COM	WREG0, [WREG1]
;__Lib_SoftUART.c,161 :: 		
0x03B8	0x200010  	MOV	#1, WREG0
0x03BA	0xDD000C  	SL	WREG0, WREG12, WREG0
0x03BC	0x884060  	MOV	WREG0, __Lib_SoftUART__tx_mask1
;__Lib_SoftUART.c,162 :: 		
0x03BE	0x2080E1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x03C0	0xEA8880  	COM	WREG0, [WREG1]
;__Lib_SoftUART.c,165 :: 		
0x03C2	0x550062  	SUB	WREG10, #2, WREG0
0x03C4	0x710810  	IOR	WREG2, [WREG0], [WREG0]
;__Lib_SoftUART.c,168 :: 		
0x03C6	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x03C8	0x500162  	SUB	WREG0, #2, WREG2
0x03CA	0x780092  	MOV	[WREG2], WREG1
0x03CC	0x2080E0  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG0
0x03CE	0x608910  	AND	WREG1, [WREG0], [WREG2]
;__Lib_SoftUART.c,170 :: 		
0x03D0	0xEF2000  	CLR	WREG0
0x03D2	0x8840C0  	MOV	WREG0, __Lib_SoftUART_InvertMaskRd
;__Lib_SoftUART.c,171 :: 		
0x03D4	0xE20006  	CP0	WREG3
0x03D6	0x320002  	BRA Z	L_Soft_UART_Init21
L__Soft_UART_Init45:
; inverted end address is: 6 (W3)
;__Lib_SoftUART.c,172 :: 		
0x03D8	0x208180  	MOV	#lo_addr(__Lib_SoftUART_InvertMaskRd), WREG0
0x03DA	0xEA8810  	COM	[WREG0], [WREG0]
L_Soft_UART_Init21:
;__Lib_SoftUART.c,175 :: 		
0x03DC	0x8040C0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x03DE	0xE10060  	CP	WREG0, #0
0x03E0	0x320006  	BRA Z	L_Soft_UART_Init22
L__Soft_UART_Init46:
;__Lib_SoftUART.c,177 :: 		
0x03E2	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x03E4	0x780110  	MOV	[WREG0], WREG2
0x03E6	0x2080E1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x03E8	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x03EA	0x610811  	AND	WREG2, [WREG1], [WREG0]
0x03EC	0x370005  	BRA	L_Soft_UART_Init23
L_Soft_UART_Init22:
;__Lib_SoftUART.c,180 :: 		
0x03EE	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x03F0	0x780110  	MOV	[WREG0], WREG2
0x03F2	0x2080C1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x03F4	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x03F6	0x710811  	IOR	WREG2, [WREG1], [WREG0]
L_Soft_UART_Init23:
;__Lib_SoftUART.c,182 :: 		
0x03F8	0x07FEF8  	RCALL	_Get_Fosc_kHz
0x03FA	0x203E82  	MOV	#1000, WREG2
0x03FC	0x200003  	MOV	#0, WREG3
0x03FE	0x07FEA9  	RCALL	__Multiply_32x32
; q1 start address is: 8 (W4)
0x0400	0xBE0200  	MOV.D	WREG0, WREG4
;__Lib_SoftUART.c,183 :: 		
0x0402	0x07FEF6  	RCALL	_Get_Fosc_Per_Cyc
0x0404	0xBE9F84  	PUSH.D	WREG4
; baud_rate end address is: 12 (W6)
0x0406	0xEB0080  	CLR	WREG1
0x0408	0xBE0106  	MOV.D	WREG6, WREG2
0x040A	0x07FEA3  	RCALL	__Multiply_32x32
0x040C	0xBE024F  	POP.D	WREG4
0x040E	0x980700  	MOV	WREG0, [WREG14+0]
0x0410	0x980711  	MOV	WREG1, [WREG14+2]
; q2 start address is: 12 (W6)
0x0412	0x90030E  	MOV	[WREG14+0], WREG6
0x0414	0x90039E  	MOV	[WREG14+2], WREG7
;__Lib_SoftUART.c,185 :: 		
0x0416	0xBE9F82  	PUSH.D	WREG2
0x0418	0x90010E  	MOV	[WREG14+0], WREG2
0x041A	0x90019E  	MOV	[WREG14+2], WREG3
0x041C	0xBE9F86  	PUSH.D	WREG6
0x041E	0xBE9F84  	PUSH.D	WREG4
0x0420	0xBE0004  	MOV.D	WREG4, WREG0
0x0422	0xEB0200  	CLR	WREG4
0x0424	0x07FE6D  	RCALL	__Divide_32x32
0x0426	0xBE024F  	POP.D	WREG4
0x0428	0xBE034F  	POP.D	WREG6
0x042A	0xBE014F  	POP.D	WREG2
; temp_long start address is: 16 (W8)
0x042C	0xBE0400  	MOV.D	WREG0, WREG8
;__Lib_SoftUART.c,186 :: 		
0x042E	0x2FFFF2  	MOV	#65535, WREG2
0x0430	0x20FFF3  	MOV	#4095, WREG3
0x0432	0xE10002  	CP	WREG0, WREG2
0x0434	0xE18803  	CPB	WREG1, WREG3
0x0436	0x360002  	BRA LEU	L_Soft_UART_Init24
L__Soft_UART_Init47:
; q1 end address is: 8 (W4)
; q2 end address is: 12 (W6)
; temp_long end address is: 16 (W8)
;__Lib_SoftUART.c,187 :: 		
0x0438	0xB3C020  	MOV.B	#2, WREG0
0x043A	0x370021  	BRA	L_end_Soft_UART_Init
L_Soft_UART_Init24:
;__Lib_SoftUART.c,189 :: 		
; temp_long start address is: 16 (W8)
; q2 start address is: 12 (W6)
; q1 start address is: 8 (W4)
0x043C	0x884028  	MOV	WREG8, __Lib_SoftUART_FullBit
0x043E	0x884039  	MOV	WREG9, __Lib_SoftUART_FullBit+2
; temp_long end address is: 16 (W8)
;__Lib_SoftUART.c,190 :: 		
0x0440	0xBE9F86  	PUSH.D	WREG6
; q1 end address is: 8 (W4)
0x0442	0xBE0004  	MOV.D	WREG4, WREG0
0x0444	0xBE0106  	MOV.D	WREG6, WREG2
0x0446	0xEB0200  	CLR	WREG4
0x0448	0x07FEA4  	RCALL	__Modulus_32x32
0x044A	0xBE034F  	POP.D	WREG6
;__Lib_SoftUART.c,192 :: 		
0x044C	0xBE0106  	MOV.D	WREG6, WREG2
0x044E	0xD10183  	LSR	WREG3, WREG3
0x0450	0xD38102  	RRC	WREG2, WREG2
; q2 end address is: 12 (W6)
0x0452	0xE10002  	CP	WREG0, WREG2
0x0454	0xE18803  	CPB	WREG1, WREG3
0x0456	0x360005  	BRA LEU	L_Soft_UART_Init25
L__Soft_UART_Init48:
;__Lib_SoftUART.c,193 :: 		
0x0458	0x200011  	MOV	#1, WREG1
0x045A	0x200002  	MOV	#0, WREG2
0x045C	0x208040  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG0
0x045E	0x409810  	ADD	WREG1, [WREG0], [WREG0++]
0x0460	0x491010  	ADDC	WREG2, [WREG0], [WREG0--]
L_Soft_UART_Init25:
;__Lib_SoftUART.c,196 :: 		
0x0462	0x208040  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG0
0x0464	0xBE0110  	MOV.D	[WREG0], WREG2
0x0466	0xD10183  	LSR	WREG3, WREG3
0x0468	0xD38102  	RRC	WREG2, WREG2
0x046A	0x884002  	MOV	WREG2, __Lib_SoftUART_HalfBit
0x046C	0x884013  	MOV	WREG3, __Lib_SoftUART_HalfBit+2
;__Lib_SoftUART.c,198 :: 		
0x046E	0x200740  	MOV	#116, WREG0
0x0470	0x200001  	MOV	#0, WREG1
0x0472	0xE11000  	CP	WREG2, WREG0
0x0474	0xE19801  	CPB	WREG3, WREG1
0x0476	0x310002  	BRA GEU	L_Soft_UART_Init26
L__Soft_UART_Init49:
;__Lib_SoftUART.c,199 :: 		
0x0478	0xB3C010  	MOV.B	#1, WREG0
0x047A	0x370001  	BRA	L_end_Soft_UART_Init
L_Soft_UART_Init26:
;__Lib_SoftUART.c,201 :: 		
0x047C	0xEF2000  	CLR	WREG0
;__Lib_SoftUART.c,202 :: 		
L_end_Soft_UART_Init:
0x047E	0xFA8000  	ULNK
0x0480	0x060000  	RETURN
; end of _Soft_UART_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x01EA	0x238800  	MOV	#14464, WREG0
0x01EC	0x200011  	MOV	#1, WREG1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x01EE	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x01F0	0x200040  	MOV	#4, WREG0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x01F2	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
__Multiply_32x32:
0x0152	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0154	0xB80A02  	MUL.UU	WREG1, WREG2, WREG4
;__Lib_Math.c,47 :: 		
0x0156	0x880050  	MOV	WREG0, WREG5
;__Lib_Math.c,48 :: 		
0x0158	0xB80002  	MUL.UU	WREG0, WREG2, WREG0
;__Lib_Math.c,49 :: 		
0x015A	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,50 :: 		
0x015C	0xB82A03  	MUL.UU	WREG5, WREG3, WREG4
;__Lib_Math.c,51 :: 		
0x015E	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x0160	0xFA8000  	ULNK
0x0162	0x060000  	RETURN
; end of __Multiply_32x32
__Divide_32x32:
0x0100	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0102	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0104	0x00000004014E  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x0108	0xE20008  	CP0	WREG4
;__Lib_Math.c,90 :: 		
0x010A	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x010C	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x010E	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0110	0x689F83  	XOR	WREG1, WREG3, [WREG15++]
;__Lib_Math.c,97 :: 		
0x0112	0xE20002  	CP0	WREG1
;__Lib_Math.c,98 :: 		
0x0114	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x0116	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,100 :: 		
0x0118	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x011A	0xE20006  	CP0	WREG3
;__Lib_Math.c,103 :: 		
0x011C	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x011E	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,105 :: 		
0x0120	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0122	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0124	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,109 :: 		
0x0126	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x0128	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,111 :: 		
0x012A	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x012C	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x012E	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,116 :: 		
0x0130	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0132	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,119 :: 		
0x0134	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,120 :: 		
0x0136	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,121 :: 		
0x0138	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,122 :: 		
0x013A	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,123 :: 		
0x013C	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,124 :: 		
0x013E	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,125 :: 		
0x0140	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0142	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,127 :: 		
0x0144	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,128 :: 		
0x0146	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x0148	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,131 :: 		
0x014A	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x014C	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x014E	0xFA8000  	ULNK
0x0150	0x060000  	RETURN
; end of __Divide_32x32
__Modulus_32x32:
0x0192	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0194	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0196	0x0000000401E6  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x019A	0xE20008  	CP0	WREG4
;__Lib_Math.c,173 :: 		
0x019C	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x019E	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x01A0	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x01A2	0x781F81  	MOV	WREG1, [WREG15++]
;__Lib_Math.c,180 :: 		
0x01A4	0xE20002  	CP0	WREG1
;__Lib_Math.c,181 :: 		
0x01A6	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x01A8	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,183 :: 		
0x01AA	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x01AC	0xE20006  	CP0	WREG3
;__Lib_Math.c,186 :: 		
0x01AE	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x01B0	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,188 :: 		
0x01B2	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x01B4	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x01B6	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,192 :: 		
0x01B8	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x01BA	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,194 :: 		
0x01BC	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x01BE	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x01C0	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x01C2	0xBE8004  	MOV.D	WREG4, WREG0
;__Lib_Math.c,200 :: 		
0x01C4	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x01C6	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,203 :: 		
0x01C8	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x01CA	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,206 :: 		
0x01CC	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,207 :: 		
0x01CE	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,208 :: 		
0x01D0	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,209 :: 		
0x01D2	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,210 :: 		
0x01D4	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,211 :: 		
0x01D6	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,212 :: 		
0x01D8	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x01DA	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,214 :: 		
0x01DC	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,215 :: 		
0x01DE	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x01E0	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,218 :: 		
0x01E2	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x01E4	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x01E6	0xFA8000  	ULNK
0x01E8	0x060000  	RETURN
; end of __Modulus_32x32
_Soft_UART_Write:
0x02DC	0xFA0000  	LNK	#0
;__Lib_SoftUART.c,106 :: 		
;__Lib_SoftUART.c,108 :: 		
0x02DE	0x781F8B  	PUSH	WREG11
; mask start address is: 10 (W5)
0x02E0	0xB3C015  	MOV.B	#1, WREG5
;__Lib_SoftUART.c,109 :: 		
0x02E2	0xFB808A  	ZE	WREG10, WREG1
0x02E4	0x208180  	MOV	#lo_addr(__Lib_SoftUART_InvertMaskRd), WREG0
0x02E6	0x688010  	XOR	WREG1, [WREG0], WREG0
0x02E8	0x784500  	MOV.B	WREG0, WREG10
;__Lib_SoftUART.c,112 :: 		
0x02EA	0x8040C0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x02EC	0xE10060  	CP	WREG0, #0
0x02EE	0x320006  	BRA Z	L_Soft_UART_Write13
L__Soft_UART_Write40:
;__Lib_SoftUART.c,114 :: 		
0x02F0	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02F2	0x780110  	MOV	[WREG0], WREG2
0x02F4	0x2080C1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x02F6	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x02F8	0x710811  	IOR	WREG2, [WREG1], [WREG0]
0x02FA	0x370005  	BRA	L_Soft_UART_Write14
L_Soft_UART_Write13:
;__Lib_SoftUART.c,117 :: 		
0x02FC	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02FE	0x780110  	MOV	[WREG0], WREG2
0x0300	0x2080E1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x0302	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0304	0x610811  	AND	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write14:
;__Lib_SoftUART.c,119 :: 		
0x0306	0x200743  	MOV	#116, WREG3
0x0308	0x200004  	MOV	#0, WREG4
0x030A	0x208042  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x030C	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x030E	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0310	0x500062  	SUB	WREG0, #2, WREG0
0x0312	0x5880E0  	SUBB	WREG1, #0, WREG1
0x0314	0x781F8A  	PUSH	WREG10
0x0316	0xBE0500  	MOV.D	WREG0, WREG10
0x0318	0x07FF25  	RCALL	_Delay_Cyc_Long
0x031A	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,121 :: 		
0x031C	0x78400A  	MOV.B	WREG10, WREG0
0x031E	0xEEE000  	COM.B	WREG0
0x0320	0x784500  	MOV.B	WREG0, WREG10
; mask end address is: 10 (W5)
0x0322	0x784185  	MOV.B	WREG5, WREG3
;__Lib_SoftUART.c,123 :: 		
L_Soft_UART_Write15:
; mask start address is: 6 (W3)
0x0324	0xE24006  	CP0.B	WREG3
0x0326	0x320021  	BRA Z	L_Soft_UART_Write16
L__Soft_UART_Write41:
;__Lib_SoftUART.c,125 :: 		
0x0328	0xFB808A  	ZE	WREG10, WREG1
0x032A	0xFB8003  	ZE	WREG3, WREG0
0x032C	0x608000  	AND	WREG1, WREG0, WREG0
0x032E	0x3A0006  	BRA NZ	L_Soft_UART_Write17
L__Soft_UART_Write42:
;__Lib_SoftUART.c,126 :: 		
0x0330	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x0332	0x780110  	MOV	[WREG0], WREG2
0x0334	0x2080C1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x0336	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0338	0x710811  	IOR	WREG2, [WREG1], [WREG0]
0x033A	0x370005  	BRA	L_Soft_UART_Write18
L_Soft_UART_Write17:
;__Lib_SoftUART.c,128 :: 		
0x033C	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x033E	0x780110  	MOV	[WREG0], WREG2
0x0340	0x2080E1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x0342	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0344	0x610811  	AND	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write18:
;__Lib_SoftUART.c,130 :: 		
0x0346	0xFB8003  	ZE	WREG3, WREG0
; mask end address is: 6 (W3)
0x0348	0xDD0041  	SL	WREG0, #1, WREG0
; mask start address is: 10 (W5)
0x034A	0x784280  	MOV.B	WREG0, WREG5
;__Lib_SoftUART.c,133 :: 		
0x034C	0x200743  	MOV	#116, WREG3
0x034E	0x200004  	MOV	#0, WREG4
0x0350	0x208042  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x0352	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x0354	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0356	0x50007A  	SUB	WREG0, #26, WREG0
0x0358	0x5880E0  	SUBB	WREG1, #0, WREG1
0x035A	0x500066  	SUB	WREG0, #6, WREG0
0x035C	0x5880E0  	SUBB	WREG1, #0, WREG1
0x035E	0x781F8A  	PUSH	WREG10
0x0360	0xBE0500  	MOV.D	WREG0, WREG10
0x0362	0x07FF00  	RCALL	_Delay_Cyc_Long
0x0364	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,137 :: 		
0x0366	0x784185  	MOV.B	WREG5, WREG3
; mask end address is: 10 (W5)
0x0368	0x37FFDD  	BRA	L_Soft_UART_Write15
L_Soft_UART_Write16:
;__Lib_SoftUART.c,140 :: 		
0x036A	0x8040C0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x036C	0xE10060  	CP	WREG0, #0
0x036E	0x320006  	BRA Z	L_Soft_UART_Write19
L__Soft_UART_Write43:
;__Lib_SoftUART.c,142 :: 		
0x0370	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x0372	0x780110  	MOV	[WREG0], WREG2
0x0374	0x2080E1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x0376	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0378	0x610811  	AND	WREG2, [WREG1], [WREG0]
0x037A	0x370005  	BRA	L_Soft_UART_Write20
L_Soft_UART_Write19:
;__Lib_SoftUART.c,145 :: 		
0x037C	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x037E	0x780110  	MOV	[WREG0], WREG2
0x0380	0x2080C1  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x0382	0x804080  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0384	0x710811  	IOR	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write20:
;__Lib_SoftUART.c,147 :: 		
0x0386	0x200743  	MOV	#116, WREG3
0x0388	0x200004  	MOV	#0, WREG4
0x038A	0x208042  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x038C	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x038E	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0390	0x781F8A  	PUSH	WREG10
0x0392	0xBE0500  	MOV.D	WREG0, WREG10
0x0394	0x07FEE7  	RCALL	_Delay_Cyc_Long
0x0396	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,149 :: 		
L_end_Soft_UART_Write:
0x0398	0x7805CF  	POP	WREG11
0x039A	0xFA8000  	ULNK
0x039C	0x060000  	RETURN
; end of _Soft_UART_Write
_Delay_Cyc_Long:
;__Lib_Delays.c,144 :: 		void Delay_Cyc_Long(unsigned long CycNo) {
;__Lib_Delays.c,145 :: 		W8 = CycNo;
0x0164	0x78040A  	MOV	WREG10, WREG8
;__Lib_Delays.c,146 :: 		W9 = HiWord(CycNo);
0x0166	0x200140  	MOV	#lo_addr(WREG10), WREG0
0x0168	0xECA000  	INC2	WREG0
0x016A	0x780490  	MOV	[WREG0], WREG9
;__Lib_Delays.c,148 :: 		PUSH       W8
0x016C	0xF80010  	PUSH	WREG8
;__Lib_Delays.c,150 :: 		MOV        #14, W7                    //   in asm because dsPIC30 can
0x016E	0x2000E7  	MOV	#14, WREG7
;__Lib_Delays.c,151 :: 		Label1:                                   //   generate DO instruction
Label1:
;__Lib_Delays.c,152 :: 		DEC        W7, W7                     //   instead of a loop.
0x0170	0xE90387  	DEC	WREG7, WREG7
;__Lib_Delays.c,153 :: 		BRA LT,    Label2                     //
0x0172	0x350003  	BRA LT	Label2
;__Lib_Delays.c,154 :: 		LSR        W9, W9                     // in that case code execution
0x0174	0xD10489  	LSR	WREG9, WREG9
;__Lib_Delays.c,155 :: 		RRC        W8, W8                     //   time would be different
0x0176	0xD38408  	RRC	WREG8, WREG8
;__Lib_Delays.c,156 :: 		BRA        Label1                     //   between dsPIC30 family
0x0178	0x37FFFB  	BRA	Label1
;__Lib_Delays.c,157 :: 		Label2:                                   //   and PIC24/dsPIC33 families
Label2:
;__Lib_Delays.c,159 :: 		POP        W9
0x017A	0xF90012  	POP	WREG9
;__Lib_Delays.c,160 :: 		MOV        #16383, W7
0x017C	0x23FFF7  	MOV	#16383, WREG7
;__Lib_Delays.c,161 :: 		AND        W9, W7, W9
0x017E	0x648487  	AND	WREG9, WREG7, WREG9
;__Lib_Delays.c,163 :: 		Delay_Cyc_loop:
Delay_Cyc_loop:
;__Lib_Delays.c,164 :: 		CP0 W8                 ; skip delay
0x0180	0xE20010  	CP0	WREG8
;__Lib_Delays.c,165 :: 		BRA Z, Delay_Cyc_rem   ;    if W8 = 0
0x0182	0x320004  	BRA Z	Delay_Cyc_rem
;__Lib_Delays.c,166 :: 		repeat #16377          ; perform delay by
0x0184	0x093FF9  	REPEAT	#16377
;__Lib_Delays.c,167 :: 		NOP                    ;   by executing W8*16384 <nop>s in Delay_Cyc_loop
0x0186	0x000000  	NOP
;__Lib_Delays.c,168 :: 		DEC W8, W8             ; next loop
0x0188	0xE90408  	DEC	WREG8, WREG8
;__Lib_Delays.c,169 :: 		bra Delay_Cyc_loop
0x018A	0x37FFFA  	BRA	Delay_Cyc_loop
;__Lib_Delays.c,170 :: 		Delay_Cyc_rem:
Delay_Cyc_rem:
;__Lib_Delays.c,171 :: 		REPEAT W9              ; execute whats
0x018C	0x098009  	REPEAT	WREG9
;__Lib_Delays.c,172 :: 		nop                    ;   remaining after the division
0x018E	0x000000  	NOP
;__Lib_Delays.c,174 :: 		}
L_end_Delay_Cyc_Long:
0x0190	0x060000  	RETURN
; end of _Delay_Cyc_Long
_Soft_UART_Read:
0x01F4	0xFA0000  	LNK	#0
;__Lib_SoftUART.c,49 :: 		
;__Lib_SoftUART.c,52 :: 		
0x01F6	0x781F8B  	PUSH	WREG11
0x01F8	0xEF2000  	CLR	WREG0
0x01FA	0x784D00  	MOV.B	WREG0, [WREG10]
;__Lib_SoftUART.c,53 :: 		
; mask start address is: 10 (W5)
0x01FC	0xB3C015  	MOV.B	#1, WREG5
;__Lib_SoftUART.c,54 :: 		
; result start address is: 12 (W6)
0x01FE	0xEF200C  	CLR	WREG6
;__Lib_SoftUART.c,56 :: 		
0x0200	0x208160  	MOV	#lo_addr(__Lib_SoftUART___StopWaiting), WREG0
0x0202	0xA10010  	BCLR	[WREG0], BitPos(__Lib_SoftUART___StopWaiting+0)
;__Lib_SoftUART.c,59 :: 		
0x0204	0x8040C0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x0206	0xE10060  	CP	WREG0, #0
0x0208	0x3A000F  	BRA NZ	L_Soft_UART_Read0
L__Soft_UART_Read31:
; mask end address is: 10 (W5)
; result end address is: 12 (W6)
;__Lib_SoftUART.c,61 :: 		
L_Soft_UART_Read1:
; result start address is: 12 (W6)
; mask start address is: 10 (W5)
0x020A	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x020C	0x780090  	MOV	[WREG0], WREG1
0x020E	0x2080A0  	MOV	#lo_addr(__Lib_SoftUART__rx_mask1), WREG0
0x0210	0x608010  	AND	WREG1, [WREG0], WREG0
0x0212	0xE10060  	CP	WREG0, #0
0x0214	0x320008  	BRA Z	L_Soft_UART_Read2
L__Soft_UART_Read32:
;__Lib_SoftUART.c,62 :: 		
0x0216	0x208160  	MOV	#lo_addr(__Lib_SoftUART___StopWaiting), WREG0
0x0218	0xA60010  	BTSS	[WREG0], BitPos(__Lib_SoftUART___StopWaiting+0)
0x021A	0x370004  	BRA	L_Soft_UART_Read3
; mask end address is: 10 (W5)
;__Lib_SoftUART.c,63 :: 		
0x021C	0xB3CFF0  	MOV.B	#255, WREG0
0x021E	0x784D00  	MOV.B	WREG0, [WREG10]
;__Lib_SoftUART.c,64 :: 		
0x0220	0x784006  	MOV.B	WREG6, WREG0
; result end address is: 12 (W6)
0x0222	0x370059  	BRA	L_end_Soft_UART_Read
;__Lib_SoftUART.c,65 :: 		
L_Soft_UART_Read3:
;__Lib_SoftUART.c,66 :: 		
; result start address is: 12 (W6)
; mask start address is: 10 (W5)
0x0224	0x37FFF2  	BRA	L_Soft_UART_Read1
L_Soft_UART_Read2:
0x0226	0x37000E  	BRA	L_Soft_UART_Read4
L_Soft_UART_Read0:
;__Lib_SoftUART.c,69 :: 		
; result end address is: 12 (W6)
L_Soft_UART_Read5:
; mask end address is: 10 (W5)
; result start address is: 12 (W6)
; mask start address is: 10 (W5)
0x0228	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x022A	0x780090  	MOV	[WREG0], WREG1
0x022C	0x2080A0  	MOV	#lo_addr(__Lib_SoftUART__rx_mask1), WREG0
0x022E	0x608010  	AND	WREG1, [WREG0], WREG0
0x0230	0xE10060  	CP	WREG0, #0
0x0232	0x3A0008  	BRA NZ	L_Soft_UART_Read6
L__Soft_UART_Read33:
;__Lib_SoftUART.c,70 :: 		
0x0234	0x208160  	MOV	#lo_addr(__Lib_SoftUART___StopWaiting), WREG0
0x0236	0xA60010  	BTSS	[WREG0], BitPos(__Lib_SoftUART___StopWaiting+0)
0x0238	0x370004  	BRA	L_Soft_UART_Read7
; mask end address is: 10 (W5)
;__Lib_SoftUART.c,71 :: 		
0x023A	0xB3CFF0  	MOV.B	#255, WREG0
0x023C	0x784D00  	MOV.B	WREG0, [WREG10]
;__Lib_SoftUART.c,72 :: 		
0x023E	0x784006  	MOV.B	WREG6, WREG0
; result end address is: 12 (W6)
0x0240	0x37004A  	BRA	L_end_Soft_UART_Read
;__Lib_SoftUART.c,73 :: 		
L_Soft_UART_Read7:
;__Lib_SoftUART.c,74 :: 		
; result start address is: 12 (W6)
; mask start address is: 10 (W5)
0x0242	0x37FFF2  	BRA	L_Soft_UART_Read5
L_Soft_UART_Read6:
; result end address is: 12 (W6)
L_Soft_UART_Read4:
; mask end address is: 10 (W5)
;__Lib_SoftUART.c,76 :: 		
; mask start address is: 10 (W5)
; result start address is: 12 (W6)
0x0244	0x200743  	MOV	#116, WREG3
0x0246	0x200004  	MOV	#0, WREG4
0x0248	0x208002  	MOV	#lo_addr(__Lib_SoftUART_HalfBit), WREG2
0x024A	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x024C	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x024E	0x781F8A  	PUSH	WREG10
0x0250	0xBE0500  	MOV.D	WREG0, WREG10
0x0252	0x07FF88  	RCALL	_Delay_Cyc_Long
;__Lib_SoftUART.c,77 :: 		
0x0254	0x200743  	MOV	#116, WREG3
0x0256	0x200004  	MOV	#0, WREG4
0x0258	0x208042  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x025A	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x025C	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x025E	0x500062  	SUB	WREG0, #2, WREG0
0x0260	0x5880E0  	SUBB	WREG1, #0, WREG1
0x0262	0xBE0500  	MOV.D	WREG0, WREG10
0x0264	0x07FF7F  	RCALL	_Delay_Cyc_Long
; mask end address is: 10 (W5)
; result end address is: 12 (W6)
0x0266	0x78054F  	POP	WREG10
0x0268	0x784105  	MOV.B	WREG5, WREG2
0x026A	0x784286  	MOV.B	WREG6, WREG5
;__Lib_SoftUART.c,80 :: 		
L_Soft_UART_Read8:
; result start address is: 10 (W5)
; mask start address is: 4 (W2)
0x026C	0xE24004  	CP0.B	WREG2
0x026E	0x32001A  	BRA Z	L_Soft_UART_Read9
L__Soft_UART_Read34:
;__Lib_SoftUART.c,82 :: 		
0x0270	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x0272	0x780090  	MOV	[WREG0], WREG1
0x0274	0x2080A0  	MOV	#lo_addr(__Lib_SoftUART__rx_mask1), WREG0
0x0276	0x608010  	AND	WREG1, [WREG0], WREG0
0x0278	0xE10060  	CP	WREG0, #0
0x027A	0x320002  	BRA Z	L__Soft_UART_Read28
L__Soft_UART_Read35:
;__Lib_SoftUART.c,83 :: 		
; result start address is: 10 (W5)
0x027C	0x72C282  	IOR.B	WREG5, WREG2, WREG5
; result end address is: 10 (W5)
; result end address is: 10 (W5)
0x027E	0x370000  	BRA	L_Soft_UART_Read10
L__Soft_UART_Read28:
;__Lib_SoftUART.c,82 :: 		
;__Lib_SoftUART.c,83 :: 		
L_Soft_UART_Read10:
;__Lib_SoftUART.c,84 :: 		
; result start address is: 10 (W5)
0x0280	0xFB8002  	ZE	WREG2, WREG0
; mask end address is: 4 (W2)
0x0282	0xDD0041  	SL	WREG0, #1, WREG0
; mask start address is: 12 (W6)
0x0284	0x784300  	MOV.B	WREG0, WREG6
;__Lib_SoftUART.c,87 :: 		
0x0286	0x200743  	MOV	#116, WREG3
0x0288	0x200004  	MOV	#0, WREG4
0x028A	0x208042  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x028C	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x028E	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0290	0x500074  	SUB	WREG0, #20, WREG0
0x0292	0x5880E0  	SUBB	WREG1, #0, WREG1
0x0294	0x500066  	SUB	WREG0, #6, WREG0
0x0296	0x5880E0  	SUBB	WREG1, #0, WREG1
0x0298	0x781F8A  	PUSH	WREG10
0x029A	0xBE0500  	MOV.D	WREG0, WREG10
0x029C	0x07FF63  	RCALL	_Delay_Cyc_Long
0x029E	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,91 :: 		
0x02A0	0x784106  	MOV.B	WREG6, WREG2
; mask end address is: 12 (W6)
0x02A2	0x37FFE4  	BRA	L_Soft_UART_Read8
L_Soft_UART_Read9:
;__Lib_SoftUART.c,94 :: 		
0x02A4	0x8040C0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x02A6	0xE10060  	CP	WREG0, #0
0x02A8	0x3A000A  	BRA NZ	L_Soft_UART_Read11
L__Soft_UART_Read36:
;__Lib_SoftUART.c,96 :: 		
0x02AA	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02AC	0x780090  	MOV	[WREG0], WREG1
0x02AE	0x2080A0  	MOV	#lo_addr(__Lib_SoftUART__rx_mask1), WREG0
0x02B0	0x608010  	AND	WREG1, [WREG0], WREG0
0x02B2	0xE10060  	CP	WREG0, #0
0x02B4	0xEF6000  	CLR.B	WREG0
0x02B6	0x3A0001  	BRA NZ	L__Soft_UART_Read37
0x02B8	0xEC6000  	INC.B	WREG0
L__Soft_UART_Read37:
0x02BA	0x784D00  	MOV.B	WREG0, [WREG10]
0x02BC	0x370009  	BRA	L_Soft_UART_Read12
L_Soft_UART_Read11:
;__Lib_SoftUART.c,99 :: 		
0x02BE	0x804040  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02C0	0x780090  	MOV	[WREG0], WREG1
0x02C2	0x2080A0  	MOV	#lo_addr(__Lib_SoftUART__rx_mask1), WREG0
0x02C4	0x608010  	AND	WREG1, [WREG0], WREG0
0x02C6	0xE10060  	CP	WREG0, #0
0x02C8	0xEF6000  	CLR.B	WREG0
0x02CA	0x320001  	BRA Z	L__Soft_UART_Read38
0x02CC	0xEC6000  	INC.B	WREG0
L__Soft_UART_Read38:
0x02CE	0x784D00  	MOV.B	WREG0, [WREG10]
L_Soft_UART_Read12:
;__Lib_SoftUART.c,101 :: 		
0x02D0	0xFB8085  	ZE	WREG5, WREG1
; result end address is: 10 (W5)
0x02D2	0x208180  	MOV	#lo_addr(__Lib_SoftUART_InvertMaskRd), WREG0
0x02D4	0x688010  	XOR	WREG1, [WREG0], WREG0
;__Lib_SoftUART.c,102 :: 		
;__Lib_SoftUART.c,103 :: 		
;__Lib_SoftUART.c,102 :: 		
;__Lib_SoftUART.c,103 :: 		
L_end_Soft_UART_Read:
0x02D6	0x7805CF  	POP	WREG11
0x02D8	0xFA8000  	ULNK
0x02DA	0x060000  	RETURN
; end of _Soft_UART_Read
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [82]    __Divide_32x32
0x0152      [18]    __Multiply_32x32
0x0164      [46]    _Delay_Cyc_Long
0x0192      [88]    __Modulus_32x32
0x01EA       [6]    _Get_Fosc_kHz
0x01F0       [4]    _Get_Fosc_Per_Cyc
0x01F4     [232]    _Soft_UART_Read
0x02DC     [194]    _Soft_UART_Write
0x039E     [228]    _Soft_UART_Init
0x0482     [146]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0800       [4]    __Lib_SoftUART_HalfBit
0x0804       [4]    __Lib_SoftUART_FullBit
0x0808       [2]    __Lib_SoftUART__port_addr
0x080A       [2]    __Lib_SoftUART__rx_mask1
0x080C       [2]    __Lib_SoftUART__tx_mask1
0x080E       [2]    __Lib_SoftUART__tx_mask0
0x0810       [2]    __Lib_SoftUART__lat_addr
0x0812       [2]    __Lib_SoftUART__rx_mask0
0x0814       [1]    _error
0x02E0       [2]    PORTF
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
0x0816       [0]    __Lib_SoftUART___StopWaiting
0x0818       [2]    __Lib_SoftUART_InvertMaskRd
0x0815       [1]    _i
0x081A       [1]    _byte_read
0x0020       [2]    SPLIM
0x0022       [2]    ACCAL
0x0024       [2]    ACCAH
0x0026       [2]    ACCAU
0x0028       [2]    ACCBL
0x002A       [2]    ACCBH
0x002C       [2]    ACCBU
0x002E       [2]    PCL
0x0030       [2]    PCH
0x0032       [2]    TBLPAG
0x0034       [2]    PSVPAG
0x0036       [2]    RCOUNT
0x0038       [2]    DCOUNT
0x003A       [2]    DOSTARTL
0x003C       [2]    DOSTARTH
0x003E       [2]    DOENDL
0x0040       [2]    DOENDH
0x0042       [2]    SR
0x0044       [2]    CORCON
0x0046       [2]    MODCON
0x0048       [2]    XMODSRT
0x004A       [2]    XMODEND
0x004C       [2]    YMODSRT
0x004E       [2]    YMODEND
0x0050       [2]    XBREV
0x0052       [2]    DISICNT
0x0080       [2]    INTCON1
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x0086       [2]    IFS1
0x0088       [2]    IFS2
0x008C       [2]    IEC0
0x008E       [2]    IEC1
0x0090       [2]    IEC2
0x0094       [2]    IPC0
0x0096       [2]    IPC1
0x0098       [2]    IPC2
0x009A       [2]    IPC3
0x009C       [2]    IPC4
0x009E       [2]    IPC5
0x00A0       [2]    IPC6
0x00A2       [2]    IPC7
0x00A4       [2]    IPC8
0x00A6       [2]    IPC9
0x00A8       [2]    IPC10
0x00B0       [2]    INTTREG
0x00C0       [2]    CNEN1
0x00C2       [2]    CNEN2
0x00C4       [2]    CNPU1
0x00C6       [2]    CNPU2
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x0108       [2]    TMR3HLD
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0114       [2]    TMR4
0x0116       [2]    TMR5HLD
0x0118       [2]    TMR5
0x011A       [2]    PR4
0x011C       [2]    PR5
0x011E       [2]    T4CON
0x0120       [2]    T5CON
0x0140       [2]    IC1BUF
0x0142       [2]    IC1CON
0x0144       [2]    IC2BUF
0x0146       [2]    IC2CON
0x0148       [2]    IC3BUF
0x014A       [2]    IC3CON
0x014C       [2]    IC4BUF
0x014E       [2]    IC4CON
0x0150       [2]    IC5BUF
0x0152       [2]    IC5CON
0x0154       [2]    IC6BUF
0x0156       [2]    IC6CON
0x0158       [2]    IC7BUF
0x015A       [2]    IC7CON
0x015C       [2]    IC8BUF
0x015E       [2]    IC8CON
0x0014       [4]    FARG_Delay_Cyc_Long_CycNo
0x0180       [2]    OC1RS
0x0182       [2]    OC1R
0x0184       [2]    OC1CON
0x0186       [2]    OC2RS
0x0188       [2]    OC2R
0x018A       [2]    OC2CON
0x018C       [2]    OC3RS
0x018E       [2]    OC3R
0x0190       [2]    OC3CON
0x0192       [2]    OC4RS
0x0194       [2]    OC4R
0x0196       [2]    OC4CON
0x0198       [2]    OC5RS
0x019A       [2]    OC5R
0x019C       [2]    OC5CON
0x019E       [2]    OC6RS
0x01A0       [2]    OC6R
0x01A2       [2]    OC6CON
0x01A4       [2]    OC7RS
0x01A6       [2]    OC7R
0x01A8       [2]    OC7CON
0x01AA       [2]    OC8RS
0x01AC       [2]    OC8R
0x01AE       [2]    OC8CON
0x0014       [2]    FARG_Soft_UART_Read_error
0x0200       [2]    I2CRCV
0x0202       [2]    I2CTRN
0x0204       [2]    I2CBRG
0x0206       [2]    I2CCON
0x0208       [2]    I2CSTAT
0x020A       [2]    I2CADD
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0212       [2]    U1RXREG
0x0214       [2]    U1BRG
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x0220       [2]    SPI1STAT
0x0222       [2]    SPI1CON
0x0224       [2]    SPI1BUF
0x0226       [2]    SPI2STAT
0x0228       [2]    SPI2CON
0x022A       [2]    SPI2BUF
0x0240       [2]    DCICON1
0x0242       [2]    DCICON2
0x0244       [2]    DCICON3
0x0246       [2]    DCISTAT
0x0248       [2]    TSCON
0x024C       [2]    RSCON
0x0250       [2]    RXBUF0
0x0252       [2]    RXBUF1
0x0254       [2]    RXBUF2
0x0256       [2]    RXBUF3
0x0258       [2]    TXBUF0
0x025A       [2]    TXBUF1
0x025C       [2]    TXBUF2
0x025E       [2]    TXBUF3
0x0280       [2]    ADCBUF0
0x0282       [2]    ADCBUF1
0x0284       [2]    ADCBUF2
0x0286       [2]    ADCBUF3
0x0288       [2]    ADCBUF4
0x028A       [2]    ADCBUF5
0x028C       [2]    ADCBUF6
0x028E       [2]    ADCBUF7
0x0290       [2]    ADCBUF8
0x0292       [2]    ADCBUF9
0x0294       [2]    ADCBUFA
0x0296       [2]    ADCBUFB
0x0298       [2]    ADCBUFC
0x029A       [2]    ADCBUFD
0x029C       [2]    ADCBUFE
0x029E       [2]    ADCBUFF
0x02A0       [2]    ADCON1
0x02A2       [2]    ADCON2
0x02A4       [2]    ADCON3
0x02A6       [2]    ADCHS
0x02A8       [2]    ADPCFG
0x02AA       [2]    ADCSSL
0x02C0       [2]    TRISA
0x02C2       [2]    PORTA
0x02C4       [2]    LATA
0x02C6       [2]    TRISB
0x02C8       [2]    PORTB
0x02CA       [2]    LATB
0x02CC       [2]    TRISC
0x02CE       [2]    PORTC
0x02D0       [2]    LATC
0x02D2       [2]    TRISD
0x02D4       [2]    PORTD
0x02D6       [2]    LATD
0x0014       [1]    FARG_Soft_UART_Write_udata
0x02DE       [2]    TRISF
0x02E0       [2]    PORTF
0x02E2       [2]    LATF
0x02E4       [2]    TRISG
0x02E6       [2]    PORTG
0x02E8       [2]    LATG
0x0300       [2]    C1RXF0SID
0x0302       [2]    C1RXF0EIDH
0x0304       [2]    C1RXF0EIDL
0x0308       [2]    C1RXF1SID
0x030A       [2]    C1RXF1EIDH
0x030C       [2]    C1RXF1EIDL
0x0310       [2]    C1RXF2SID
0x0312       [2]    C1RXF2EIDH
0x0314       [2]    C1RXF2EIDL
0x0318       [2]    C1RXF3SID
0x031A       [2]    C1RXF3EIDH
0x031C       [2]    C1RXF3EIDL
0x0320       [2]    C1RXF4SID
0x0322       [2]    C1RXF4EIDH
0x0324       [2]    C1RXF4EIDL
0x0328       [2]    C1RXF5SID
0x032A       [2]    C1RXF5EIDH
0x032C       [2]    C1RXF5EIDL
0x0330       [2]    C1RXM0SID
0x0332       [2]    C1RXM0EIDH
0x0334       [2]    C1RXM0EIDL
0x0338       [2]    C1RXM1SID
0x033A       [2]    C1RXM1EIDH
0x033C       [2]    C1RXM1EIDL
0x0340       [2]    C1TX2SID
0x0342       [2]    C1TX2EID
0x0344       [2]    C1TX2DLC
0x0346       [2]    C1TX2B1
0x0348       [2]    C1TX2B2
0x034A       [2]    C1TX2B3
0x034C       [2]    C1TX2B4
0x034E       [2]    C1TX2CON
0x0350       [2]    C1TX1SID
0x0352       [2]    C1TX1EID
0x0354       [2]    C1TX1DLC
0x0356       [2]    C1TX1B1
0x0358       [2]    C1TX1B2
0x035A       [2]    C1TX1B3
0x035C       [2]    C1TX1B4
0x035E       [2]    C1TX1CON
0x0360       [2]    C1TX0SID
0x0362       [2]    C1TX0EID
0x0364       [2]    C1TX0DLC
0x0366       [2]    C1TX0B1
0x0368       [2]    C1TX0B2
0x036A       [2]    C1TX0B3
0x036C       [2]    C1TX0B4
0x036E       [2]    C1TX0CON
0x0370       [2]    C1RX1SID
0x0372       [2]    C1RX1EID
0x0374       [2]    C1RX1DLC
0x0376       [2]    C1RX1B1
0x0378       [2]    C1RX1B2
0x037A       [2]    C1RX1B3
0x037C       [2]    C1RX1B4
0x037E       [2]    C1RX1CON
0x0380       [2]    C1RX0SID
0x0382       [2]    C1RX0EID
0x0384       [2]    C1RX0DLC
0x0386       [2]    C1RX0B1
0x0388       [2]    C1RX0B2
0x038A       [2]    C1RX0B3
0x038C       [2]    C1RX0B4
0x038E       [2]    C1RX0CON
0x0390       [2]    C1CTRL
0x0392       [2]    C1CFG1
0x0394       [2]    C1CFG2
0x0396       [2]    C1INTF
0x0398       [2]    C1INTE
0x039A       [2]    C1EC
0x039A       [2]    C1RERRCNT
0x0014       [2]    FARG_Soft_UART_Init_port
0x0016       [2]    FARG_Soft_UART_Init_rx_pin
0x0018       [2]    FARG_Soft_UART_Init_tx_pin
0x03C0       [2]    C2RXF0SID
0x03C2       [2]    C2RXF0EIDH
0x03C4       [2]    C2RXF0EIDL
0x03C8       [2]    C2RXF1SID
0x03CA       [2]    C2RXF1EIDH
0x03CC       [2]    C2RXF1EIDL
0x03D0       [2]    C2RXF2SID
0x03D2       [2]    C2RXF2EIDH
0x03D4       [2]    C2RXF2EIDL
0x03D8       [2]    C2RXF3SID
0x03DA       [2]    C2RXF3EIDH
0x03DC       [2]    C2RXF3EIDL
0x03E0       [2]    C2RXF4SID
0x03E2       [2]    C2RXF4EIDH
0x03E4       [2]    C2RXF4EIDL
0x03E8       [2]    C2RXF5SID
0x03EA       [2]    C2RXF5EIDH
0x03EC       [2]    C2RXF5EIDL
0x03F0       [2]    C2RXM0SID
0x03F2       [2]    C2RXM0EIDH
0x03F4       [2]    C2RXM0EIDL
0x03F8       [2]    C2RXM1SID
0x03FA       [2]    C2RXM1EIDH
0x03FC       [2]    C2RXM1EIDL
0x0400       [2]    C2TX2SID
0x0402       [2]    C2TX2EID
0x0404       [2]    C2TX2DLC
0x0406       [2]    C2TX2B1
0x0408       [2]    C2TX2B2
0x040A       [2]    C2TX2B3
0x040C       [2]    C2TX2B4
0x040E       [2]    C2TX2CON
0x0410       [2]    C2TX1SID
0x0412       [2]    C2TX1EID
0x0414       [2]    C2TX1DLC
0x0416       [2]    C2TX1B1
0x0418       [2]    C2TX1B2
0x041A       [2]    C2TX1B3
0x041C       [2]    C2TX1B4
0x041E       [2]    C2TX1CON
0x0420       [2]    C2TX0SID
0x0422       [2]    C2TX0EID
0x0424       [2]    C2TX0DLC
0x0426       [2]    C2TX0B1
0x0428       [2]    C2TX0B2
0x042A       [2]    C2TX0B3
0x042C       [2]    C2TX0B4
0x042E       [2]    C2TX0CON
0x0430       [2]    C2RX1SID
0x0432       [2]    C2RX1EID
0x0434       [2]    C2RX1DLC
0x0436       [2]    C2RX1B1
0x0438       [2]    C2RX1B2
0x043A       [2]    C2RX1B3
0x043C       [2]    C2RX1B4
0x043E       [2]    C2RX1CON
0x0440       [2]    C2RX0SID
0x0442       [2]    C2RX0EID
0x0444       [2]    C2RX0DLC
0x0446       [2]    C2RX0B1
0x0448       [2]    C2RX0B2
0x044A       [2]    C2RX0B3
0x044C       [2]    C2RX0B4
0x044E       [2]    C2RX0CON
0x0450       [2]    C2CTRL
0x0452       [2]    C2CFG1
0x0454       [2]    C2CFG2
0x0456       [2]    C2INTF
0x0458       [2]    C2INTE
0x045A       [2]    C2EC
0x045A       [2]    C2RERRCNT
0x0740       [2]    RCON
0x0742       [2]    OSCCON
0x0744       [2]    OSCTUN
0x0760       [2]    NVMCON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x0766       [2]    NVMKEY
0x0770       [2]    PMD1
0x0772       [2]    PMD2
0x0774       [2]    PMD3
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_main2
  L_main3
  L_main5
  L_main6
  L_main7
  L_main8
  L_main10
  L_main11
  L_main12
  L_main13
  L_end_main
  _main
  L__main15
  L__main16
  L__main17
  L__main18
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_Soft_UART_Read0
  L_Soft_UART_Read1
  L_Soft_UART_Read2
  L_Soft_UART_Read3
  L_Soft_UART_Read4
  L_Soft_UART_Read5
  L_Soft_UART_Read6
  L_Soft_UART_Read7
  L_Soft_UART_Read8
  L_Soft_UART_Read9
  L_Soft_UART_Read10
  L_Soft_UART_Read11
  L_Soft_UART_Read12
  L_Soft_UART_Write13
  L_Soft_UART_Write14
  L_Soft_UART_Write15
  L_Soft_UART_Write16
  L_Soft_UART_Write17
  L_Soft_UART_Write18
  L_Soft_UART_Write19
  L_Soft_UART_Write20
  L_Soft_UART_Init21
  L_Soft_UART_Init22
  L_Soft_UART_Init23
  L_Soft_UART_Init24
  L_Soft_UART_Init25
  L_Soft_UART_Init26
  L_Soft_UART_Init27
  L__Soft_UART_Read28
  L_end_Soft_UART_Break
  _Soft_UART_Break
  L_end_Soft_UART_Read
  _Soft_UART_Read
  L__Soft_UART_Read31
  L__Soft_UART_Read32
  L__Soft_UART_Read33
  L__Soft_UART_Read34
  L__Soft_UART_Read35
  L__Soft_UART_Read36
  L__Soft_UART_Read37
  L__Soft_UART_Read38
  L_end_Soft_UART_Write
  _Soft_UART_Write
  L__Soft_UART_Write40
  L__Soft_UART_Write41
  L__Soft_UART_Write42
  L__Soft_UART_Write43
  L_end_Soft_UART_Init
  _Soft_UART_Init
  L__Soft_UART_Init45
  L__Soft_UART_Init46
  L__Soft_UART_Init47
  L__Soft_UART_Init48
  L__Soft_UART_Init49
