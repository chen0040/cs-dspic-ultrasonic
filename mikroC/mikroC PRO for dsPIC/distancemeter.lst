;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2011-1-30 20:02:27
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040450  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000432  	1074
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0450	0x2081CF  	MOV	#2076, WREG15
0x0452	0x20FFF0  	MOV	#4095, WREG0
0x0454	0xB7A020  	MOV	WREG, SPLIM
0x0456	0x200000  	MOV	#0, WREG0
0x0458	0xB7A034  	MOV	WREG, PSVPAG
0x045A	0x200040  	MOV	#4, WREG0
0x045C	0xB72044  	IOR	CORCON
0x045E	0xFA000E  	LNK	#14
0x0460	0xF80008  	PUSH	WREG4
0x0462	0xF80006  	PUSH	WREG3
;distancemeter.c,102 :: 		void main() {                                   // Main Program
;distancemeter.c,104 :: 		InitPort();                                   // Initialization
0x0464	0x781F8A  	PUSH	WREG10
0x0466	0x781F8B  	PUSH	WREG11
0x0468	0x07FFD0  	RCALL	_InitPort
;distancemeter.c,105 :: 		InitTimer();
0x046A	0x07FFD6  	RCALL	_InitTimer
;distancemeter.c,106 :: 		InitADC();
0x046C	0x07FFCC  	RCALL	_InitADC
;distancemeter.c,107 :: 		InitUART();
0x046E	0x07FF7E  	RCALL	_InitUART
;distancemeter.c,109 :: 		while(1) {                                    // Unending loop
L_main2:
;distancemeter.c,112 :: 		IEC0.T1IE = 1;                            // enable T1 interrupt
0x0470	0xA8608C  	BSET	IEC0, #3
;distancemeter.c,113 :: 		Delay_us(100);                            // Software PWM lasts 300us
0x0472	0x2029A7  	MOV	#666, WREG7
L_main4:
0x0474	0xED200E  	DEC	WREG7
0x0476	0x3AFFFE  	BRA NZ	L_main4
0x0478	0x000000  	NOP
0x047A	0x000000  	NOP
;distancemeter.c,114 :: 		IEC0.T1IE = 0;                            // disable T1 interrupt
0x047C	0xA9608C  	BCLR	IEC0, #3
;distancemeter.c,117 :: 		Delay_ms(1);                              // wait 1ms so piezzo sattles down
0x047E	0x21A0A7  	MOV	#6666, WREG7
L_main6:
0x0480	0xED200E  	DEC	WREG7
0x0482	0x3AFFFE  	BRA NZ	L_main6
0x0484	0x000000  	NOP
0x0486	0x000000  	NOP
;distancemeter.c,119 :: 		InitDelay();                              // Start/initialize Timer2 to count Delay
0x0488	0x07FF3D  	RCALL	_InitDelay
;distancemeter.c,121 :: 		temp = ADC1_Get_Sample(8);                // get first two samples
0x048A	0x20008A  	MOV	#8, WREG10
0x048C	0x07FF2C  	RCALL	_ADC1_Get_Sample
0x048E	0x884070  	MOV	WREG0, _temp
;distancemeter.c,122 :: 		Delay_us(1);
0x0490	0x200067  	MOV	#6, WREG7
L_main8:
0x0492	0xED200E  	DEC	WREG7
0x0494	0x3AFFFE  	BRA NZ	L_main8
0x0496	0x000000  	NOP
0x0498	0x000000  	NOP
;distancemeter.c,123 :: 		temp_sec = ADC1_Get_Sample(8);
0x049A	0x20008A  	MOV	#8, WREG10
0x049C	0x07FF24  	RCALL	_ADC1_Get_Sample
0x049E	0x884060  	MOV	WREG0, _temp_sec
;distancemeter.c,125 :: 		InitVariable();                           // Initialization of Variables
0x04A0	0x07FF36  	RCALL	_InitVariable
;distancemeter.c,127 :: 		while (temp > temp_sec) {                 // check if returned wave is uprising
L_main10:
0x04A2	0x804071  	MOV	_temp, WREG1
0x04A4	0x2080C0  	MOV	#lo_addr(_temp_sec), WREG0
0x04A6	0xE10810  	CP	WREG1, [WREG0]
0x04A8	0x360011  	BRA LEU	L_main11
L__main71:
;distancemeter.c,128 :: 		Delay_us(10);                           //   if not check again in 10us
0x04AA	0x200427  	MOV	#66, WREG7
L_main12:
0x04AC	0xED200E  	DEC	WREG7
0x04AE	0x3AFFFE  	BRA NZ	L_main12
0x04B0	0x000000  	NOP
0x04B2	0x000000  	NOP
;distancemeter.c,129 :: 		temp = ADC1_Get_Sample(8);
0x04B4	0x20008A  	MOV	#8, WREG10
0x04B6	0x07FF17  	RCALL	_ADC1_Get_Sample
0x04B8	0x884070  	MOV	WREG0, _temp
;distancemeter.c,130 :: 		Delay_us(1);
0x04BA	0x200067  	MOV	#6, WREG7
L_main14:
0x04BC	0xED200E  	DEC	WREG7
0x04BE	0x3AFFFE  	BRA NZ	L_main14
0x04C0	0x000000  	NOP
0x04C2	0x000000  	NOP
;distancemeter.c,131 :: 		temp_sec = ADC1_Get_Sample(8);
0x04C4	0x20008A  	MOV	#8, WREG10
0x04C6	0x07FF0F  	RCALL	_ADC1_Get_Sample
0x04C8	0x884060  	MOV	WREG0, _temp_sec
;distancemeter.c,132 :: 		}
0x04CA	0x37FFEB  	BRA	L_main10
L_main11:
;distancemeter.c,134 :: 		while(abc < 1000) {                       // Measure in lenght of 250ms
L_main16:
0x04CC	0x804091  	MOV	_abc, WREG1
0x04CE	0x203E80  	MOV	#1000, WREG0
0x04D0	0xE10800  	CP	WREG1, WREG0
0x04D2	0x3D0012  	BRA GE	L_main17
L__main72:
;distancemeter.c,135 :: 		temp = ADC1_Get_Sample(8);              // get sample
0x04D4	0x20008A  	MOV	#8, WREG10
0x04D6	0x07FF07  	RCALL	_ADC1_Get_Sample
0x04D8	0x884070  	MOV	WREG0, _temp
;distancemeter.c,136 :: 		if (temp > temp_old) {                  // if new value is bigger then old
0x04DA	0x208101  	MOV	#lo_addr(_temp_old), WREG1
0x04DC	0xE10011  	CP	WREG0, [WREG1]
0x04DE	0x360004  	BRA LEU	L_main18
L__main73:
;distancemeter.c,137 :: 		temp_old = temp;                      //   set value of ADC into temporary variable
0x04E0	0x804070  	MOV	_temp, WREG0
0x04E2	0x884080  	MOV	WREG0, _temp_old
;distancemeter.c,138 :: 		time = TMR2;                          //   remember time when value was measured
0x04E4	0xBF8106  	MOV	TMR2, WREG
0x04E6	0x8840A0  	MOV	WREG0, _time
;distancemeter.c,139 :: 		}
L_main18:
;distancemeter.c,140 :: 		abc++;
0x04E8	0x200011  	MOV	#1, WREG1
0x04EA	0x208120  	MOV	#lo_addr(_abc), WREG0
0x04EC	0x408810  	ADD	WREG1, [WREG0], [WREG0]
;distancemeter.c,141 :: 		Delay_us(50);
0x04EE	0x2014D7  	MOV	#333, WREG7
L_main19:
0x04F0	0xED200E  	DEC	WREG7
0x04F2	0x3AFFFE  	BRA NZ	L_main19
0x04F4	0x000000  	NOP
;distancemeter.c,142 :: 		}
0x04F6	0x37FFEA  	BRA	L_main16
L_main17:
;distancemeter.c,143 :: 		T2CON.TON = 0;                            // Stop Timer2
0x04F8	0xA9E111  	BCLR	T2CON, #15
;distancemeter.c,145 :: 		if (time < 0)                             // absolute value of time
0x04FA	0x8040A0  	MOV	_time, WREG0
0x04FC	0xE10060  	CP	WREG0, #0
0x04FE	0x310003  	BRA GEU	L_main21
L__main74:
;distancemeter.c,146 :: 		time = - time;
0x0500	0x8040A1  	MOV	_time, WREG1
0x0502	0x208140  	MOV	#lo_addr(_time), WREG0
0x0504	0x108860  	SUBR	WREG1, #0, [WREG0]
L_main21:
;distancemeter.c,149 :: 		if (time < 600)
0x0506	0x8040A1  	MOV	_time, WREG1
0x0508	0x202580  	MOV	#600, WREG0
0x050A	0xE10800  	CP	WREG1, WREG0
0x050C	0x310006  	BRA GEU	L_main22
L__main75:
;distancemeter.c,150 :: 		distance = time / 40;                   //  40
0x050E	0x200282  	MOV	#40, WREG2
0x0510	0x8040A0  	MOV	_time, WREG0
0x0512	0x090011  	REPEAT	#17
0x0514	0xD88002  	DIV.U	WREG0, WREG2
0x0516	0x884050  	MOV	WREG0, _distance
0x0518	0x370048  	BRA	L_main23
L_main22:
;distancemeter.c,151 :: 		else if ((time > 599) && (time < 1200))
0x051A	0x8040A1  	MOV	_time, WREG1
0x051C	0x202570  	MOV	#599, WREG0
0x051E	0xE10800  	CP	WREG1, WREG0
0x0520	0x36000A  	BRA LEU	L__main54
L__main76:
0x0522	0x8040A1  	MOV	_time, WREG1
0x0524	0x204B00  	MOV	#1200, WREG0
0x0526	0xE10800  	CP	WREG1, WREG0
0x0528	0x310006  	BRA GEU	L__main53
L__main77:
L__main52:
;distancemeter.c,152 :: 		distance = time / 60;                   //  60
0x052A	0x2003C2  	MOV	#60, WREG2
0x052C	0x8040A0  	MOV	_time, WREG0
0x052E	0x090011  	REPEAT	#17
0x0530	0xD88002  	DIV.U	WREG0, WREG2
0x0532	0x884050  	MOV	WREG0, _distance
0x0534	0x37003A  	BRA	L_main27
;distancemeter.c,151 :: 		else if ((time > 599) && (time < 1200))
L__main54:
L__main53:
;distancemeter.c,153 :: 		else if ((time > 1199) && (time < 2800))
0x0536	0x8040A1  	MOV	_time, WREG1
0x0538	0x204AF0  	MOV	#1199, WREG0
0x053A	0xE10800  	CP	WREG1, WREG0
0x053C	0x36000A  	BRA LEU	L__main56
L__main78:
0x053E	0x8040A1  	MOV	_time, WREG1
0x0540	0x20AF00  	MOV	#2800, WREG0
0x0542	0xE10800  	CP	WREG1, WREG0
0x0544	0x310006  	BRA GEU	L__main55
L__main79:
L__main51:
;distancemeter.c,154 :: 		distance = time / 90;                   //  90
0x0546	0x2005A2  	MOV	#90, WREG2
0x0548	0x8040A0  	MOV	_time, WREG0
0x054A	0x090011  	REPEAT	#17
0x054C	0xD88002  	DIV.U	WREG0, WREG2
0x054E	0x884050  	MOV	WREG0, _distance
0x0550	0x37002C  	BRA	L_main31
;distancemeter.c,153 :: 		else if ((time > 1199) && (time < 2800))
L__main56:
L__main55:
;distancemeter.c,155 :: 		else if ((time > 2799) && (time < 7200))
0x0552	0x8040A1  	MOV	_time, WREG1
0x0554	0x20AEF0  	MOV	#2799, WREG0
0x0556	0xE10800  	CP	WREG1, WREG0
0x0558	0x36000A  	BRA LEU	L__main58
L__main80:
0x055A	0x8040A1  	MOV	_time, WREG1
0x055C	0x21C200  	MOV	#7200, WREG0
0x055E	0xE10800  	CP	WREG1, WREG0
0x0560	0x310006  	BRA GEU	L__main57
L__main81:
L__main50:
;distancemeter.c,156 :: 		distance = time / 110;                  // 110
0x0562	0x2006E2  	MOV	#110, WREG2
0x0564	0x8040A0  	MOV	_time, WREG0
0x0566	0x090011  	REPEAT	#17
0x0568	0xD88002  	DIV.U	WREG0, WREG2
0x056A	0x884050  	MOV	WREG0, _distance
0x056C	0x37001E  	BRA	L_main35
;distancemeter.c,155 :: 		else if ((time > 2799) && (time < 7200))
L__main58:
L__main57:
;distancemeter.c,157 :: 		else if ((time > 7199) && (time < 20000))
0x056E	0x8040A1  	MOV	_time, WREG1
0x0570	0x21C1F0  	MOV	#7199, WREG0
0x0572	0xE10800  	CP	WREG1, WREG0
0x0574	0x36000A  	BRA LEU	L__main60
L__main82:
0x0576	0x8040A1  	MOV	_time, WREG1
0x0578	0x24E200  	MOV	#20000, WREG0
0x057A	0xE10800  	CP	WREG1, WREG0
0x057C	0x310006  	BRA GEU	L__main59
L__main83:
L__main49:
;distancemeter.c,158 :: 		distance = time / 125;                  // 125
0x057E	0x2007D2  	MOV	#125, WREG2
0x0580	0x8040A0  	MOV	_time, WREG0
0x0582	0x090011  	REPEAT	#17
0x0584	0xD88002  	DIV.U	WREG0, WREG2
0x0586	0x884050  	MOV	WREG0, _distance
0x0588	0x370010  	BRA	L_main39
;distancemeter.c,157 :: 		else if ((time > 7199) && (time < 20000))
L__main60:
L__main59:
;distancemeter.c,159 :: 		else if ((time > 19999) && (time < 35000))
0x058A	0x8040A1  	MOV	_time, WREG1
0x058C	0x24E1F0  	MOV	#19999, WREG0
0x058E	0xE10800  	CP	WREG1, WREG0
0x0590	0x36000A  	BRA LEU	L__main62
L__main84:
0x0592	0x8040A1  	MOV	_time, WREG1
0x0594	0x288B80  	MOV	#35000, WREG0
0x0596	0xE10800  	CP	WREG1, WREG0
0x0598	0x310006  	BRA GEU	L__main61
L__main85:
L__main48:
;distancemeter.c,160 :: 		distance = time / 135;                  // 135
0x059A	0x200872  	MOV	#135, WREG2
0x059C	0x8040A0  	MOV	_time, WREG0
0x059E	0x090011  	REPEAT	#17
0x05A0	0xD88002  	DIV.U	WREG0, WREG2
0x05A2	0x884050  	MOV	WREG0, _distance
0x05A4	0x370002  	BRA	L_main43
;distancemeter.c,159 :: 		else if ((time > 19999) && (time < 35000))
L__main62:
L__main61:
;distancemeter.c,162 :: 		distance = 0;
0x05A6	0xEF2000  	CLR	WREG0
0x05A8	0x884050  	MOV	WREG0, _distance
L_main43:
L_main39:
L_main35:
L_main31:
L_main27:
L_main23:
;distancemeter.c,164 :: 		if (distance == 0) {                      // if distance is 0 the object is too far
0x05AA	0x804050  	MOV	_distance, WREG0
0x05AC	0xE10060  	CP	WREG0, #0
0x05AE	0x3A000A  	BRA NZ	L_main44
L__main86:
;distancemeter.c,165 :: 		UART1_Write_Text ("Too Far!");          // send value over UART
0x05B0	0x4701E0  	ADD	WREG14, #0, WREG3
0x05B2	0x286694  	MOV	#lo_addr(?ICS?lstr6_distancemeter), WREG4
0x05B4	0x090008  	REPEAT	#8
0x05B6	0x7859B4  	MOV.B	[WREG4++], [WREG3++]
0x05B8	0x470060  	ADD	WREG14, #0, WREG0
0x05BA	0x780500  	MOV	WREG0, WREG10
0x05BC	0x07FE2A  	RCALL	_UART1_Write_Text
;distancemeter.c,166 :: 		UART1_Write(13);                        // line feed
0x05BE	0x2000DA  	MOV	#13, WREG10
0x05C0	0x07FDD2  	RCALL	_UART1_Write
;distancemeter.c,167 :: 		}
0x05C2	0x370012  	BRA	L_main45
L_main44:
;distancemeter.c,169 :: 		IntToStr(distance, txt);                // converts time into string
0x05C4	0x20816B  	MOV	#lo_addr(_txt), WREG11
0x05C6	0x80405A  	MOV	_distance, WREG10
0x05C8	0x07FEA9  	RCALL	_IntToStr
;distancemeter.c,170 :: 		UART1_Write_Text(txt);                  // send value over UART
0x05CA	0x20816A  	MOV	#lo_addr(_txt), WREG10
0x05CC	0x07FE22  	RCALL	_UART1_Write_Text
;distancemeter.c,171 :: 		UART1_Write_Text (" cm");               // send value over UART
0x05CE	0x200203  	MOV	#32, WREG3
0x05D0	0x984F13  	MOV.B	WREG3, [WREG14+9]
0x05D2	0x200633  	MOV	#99, WREG3
0x05D4	0x984F23  	MOV.B	WREG3, [WREG14+10]
0x05D6	0x2006D3  	MOV	#109, WREG3
0x05D8	0x984F33  	MOV.B	WREG3, [WREG14+11]
0x05DA	0x200003  	MOV	#0, WREG3
0x05DC	0x984F43  	MOV.B	WREG3, [WREG14+12]
0x05DE	0x470069  	ADD	WREG14, #9, WREG0
0x05E0	0x780500  	MOV	WREG0, WREG10
0x05E2	0x07FE17  	RCALL	_UART1_Write_Text
;distancemeter.c,172 :: 		UART1_Write(13);                        // line feed
0x05E4	0x2000DA  	MOV	#13, WREG10
0x05E6	0x07FDBF  	RCALL	_UART1_Write
;distancemeter.c,173 :: 		}
L_main45:
;distancemeter.c,175 :: 		Delay_ms(500);                              // delay before next measure
0x05E8	0x200338  	MOV	#51, WREG8
0x05EA	0x2DCE57  	MOV	#56549, WREG7
L_main46:
0x05EC	0xED200E  	DEC	WREG7
0x05EE	0x3AFFFE  	BRA NZ	L_main46
0x05F0	0xED2010  	DEC	WREG8
0x05F2	0x3AFFFC  	BRA NZ	L_main46
;distancemeter.c,176 :: 		}
0x05F4	0x37FF3D  	BRA	L_main2
;distancemeter.c,177 :: 		}
L_end_main:
0x05F6	0xF90006  	POP	WREG3
0x05F8	0xF90008  	POP	WREG4
0x05FA	0xFA8000  	ULNK
L__main87:
0x05FC	0x37FFFF  	BRA	L__main87
; end of _main
_InitPort:
;distancemeter.c,54 :: 		void InitPort(void) {                           // function for initialization of I/O PORTS
;distancemeter.c,55 :: 		ADPCFG = 0xFEFF;                              // Configure AN pins as digital except PinB8
0x040A	0x2FEFF0  	MOV	#65279, WREG0
0x040C	0xB7A2A8  	MOV	WREG, ADPCFG
;distancemeter.c,56 :: 		TRISC = 0x0000;                               // set PORTC as output
0x040E	0xEF22CC  	CLR	TRISC
;distancemeter.c,57 :: 		PORTC = 0x2000;                               // default value of PORTC
0x0410	0x220000  	MOV	#8192, WREG0
0x0412	0xB7A2CE  	MOV	WREG, PORTC
;distancemeter.c,58 :: 		TRISB.B8 = 1;                                 // set PinB8 as input
0x0414	0xA802C7  	BSET	TRISB, #8
;distancemeter.c,59 :: 		}
L_end_InitPort:
0x0416	0x060000  	RETURN
; end of _InitPort
_InitTimer:
;distancemeter.c,61 :: 		void InitTimer(void) {                          // Initialization of Timer1
;distancemeter.c,62 :: 		T1CON.B5 = 0;                                 // prescaler 1:1
0x0418	0xA9A104  	BCLR	T1CON, #5
;distancemeter.c,63 :: 		T1CON.B4 = 0;
0x041A	0xA98104  	BCLR	T1CON, #4
;distancemeter.c,64 :: 		PR1 = (unsigned long)(Get_Fosc_kHz()) * 1000 / (8 * SAMPLE_FREQ);
0x041C	0x07FF38  	RCALL	_Get_Fosc_kHz
0x041E	0x203E82  	MOV	#1000, WREG2
0x0420	0x200003  	MOV	#0, WREG3
0x0422	0x07FF2C  	RCALL	__Multiply_32x32
0x0424	0x2E2002  	MOV	#57856, WREG2
0x0426	0x200043  	MOV	#4, WREG3
0x0428	0xEB0200  	CLR	WREG4
0x042A	0x07FF34  	RCALL	__Divide_32x32
0x042C	0x880810  	MOV	WREG0, PR1
;distancemeter.c,65 :: 		TON_bit = 1;                                  // start Timer1
0x042E	0xA8E105  	BSET	TON_bit, #15
;distancemeter.c,66 :: 		}
L_end_InitTimer:
0x0430	0x060000  	RETURN
; end of _InitTimer
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x028E	0x238800  	MOV	#14464, WREG0
0x0290	0x200011  	MOV	#1, WREG1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0292	0x060000  	RETURN
; end of _Get_Fosc_kHz
__Multiply_32x32:
0x027C	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x027E	0xB80A02  	MUL.UU	WREG1, WREG2, WREG4
;__Lib_Math.c,47 :: 		
0x0280	0x880050  	MOV	WREG0, WREG5
;__Lib_Math.c,48 :: 		
0x0282	0xB80002  	MUL.UU	WREG0, WREG2, WREG0
;__Lib_Math.c,49 :: 		
0x0284	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,50 :: 		
0x0286	0xB82A03  	MUL.UU	WREG5, WREG3, WREG4
;__Lib_Math.c,51 :: 		
0x0288	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x028A	0xFA8000  	ULNK
0x028C	0x060000  	RETURN
; end of __Multiply_32x32
__Divide_32x32:
0x0294	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0296	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0298	0x0000000402E2  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x029C	0xE20008  	CP0	WREG4
;__Lib_Math.c,90 :: 		
0x029E	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x02A0	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x02A2	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x02A4	0x689F83  	XOR	WREG1, WREG3, [WREG15++]
;__Lib_Math.c,97 :: 		
0x02A6	0xE20002  	CP0	WREG1
;__Lib_Math.c,98 :: 		
0x02A8	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x02AA	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,100 :: 		
0x02AC	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x02AE	0xE20006  	CP0	WREG3
;__Lib_Math.c,103 :: 		
0x02B0	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x02B2	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,105 :: 		
0x02B4	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x02B6	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x02B8	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,109 :: 		
0x02BA	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x02BC	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,111 :: 		
0x02BE	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x02C0	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x02C2	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,116 :: 		
0x02C4	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x02C6	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,119 :: 		
0x02C8	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,120 :: 		
0x02CA	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,121 :: 		
0x02CC	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,122 :: 		
0x02CE	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,123 :: 		
0x02D0	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,124 :: 		
0x02D2	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,125 :: 		
0x02D4	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x02D6	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,127 :: 		
0x02D8	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,128 :: 		
0x02DA	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x02DC	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,131 :: 		
0x02DE	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x02E0	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x02E2	0xFA8000  	ULNK
0x02E4	0x060000  	RETURN
; end of __Divide_32x32
_InitADC:
;distancemeter.c,75 :: 		void InitADC(void) {                            // Initialization of ADC module
;distancemeter.c,76 :: 		ADC1_Init();
0x0406	0x07FEF9  	RCALL	_ADC1_Init
;distancemeter.c,77 :: 		}
L_end_InitADC:
0x0408	0x060000  	RETURN
; end of _InitADC
_ADC1_Init:
0x01FA	0xFA0000  	LNK	#0
;__Lib_ADC_1_p24FJ_p30.c,41 :: 		
;__Lib_ADC_1_p24FJ_p30.c,42 :: 		
0x01FC	0x202E60  	MOV	#lo_addr(_ADC1_Get_Sample), WREG0
0x01FE	0x884010  	MOV	WREG0, _ADC_Get_Sample_Ptr
;__Lib_ADC_1_p24FJ_p30.c,44 :: 		
0x0200	0x200E00  	MOV	#224, WREG0
0x0202	0xB7A2A0  	MOV	WREG, ADCON1
;__Lib_ADC_1_p24FJ_p30.c,45 :: 		
0x0204	0xEF22A2  	CLR	ADCON2
;__Lib_ADC_1_p24FJ_p30.c,47 :: 		
0x0206	0x21F3F0  	MOV	#7999, WREG0
0x0208	0xB7A2A4  	MOV	WREG, ADCON3
;__Lib_ADC_1_p24FJ_p30.c,48 :: 		
0x020A	0xEF22AA  	CLR	ADCSSL
;__Lib_ADC_1_p24FJ_p30.c,49 :: 		
0x020C	0xA8E2A1  	BSET	ADCON1, #15
;__Lib_ADC_1_p24FJ_p30.c,50 :: 		
L_end_ADC1_Init:
0x020E	0xFA8000  	ULNK
0x0210	0x060000  	RETURN
; end of _ADC1_Init
_InitUART:
0x036C	0xFA006C  	LNK	#108
0x036E	0xF80004  	PUSH	WREG2
0x0370	0xF80002  	PUSH	WREG1
;distancemeter.c,85 :: 		void InitUART(void) {                           // Initialization of UART1
;distancemeter.c,86 :: 		UART1_Init(144000);
0x0372	0x781F8A  	PUSH	WREG10
0x0374	0x781F8B  	PUSH	WREG11
0x0376	0x23280A  	MOV	#12928, WREG10
0x0378	0x20002B  	MOV	#2, WREG11
0x037A	0x07FEFC  	RCALL	_UART1_Init
;distancemeter.c,87 :: 		UART1_Write_Text ("Distance Meter 2");        // send value over UART
0x037C	0x4700E0  	ADD	WREG14, #0, WREG1
0x037E	0x285FE2  	MOV	#lo_addr(?ICS?lstr1_distancemeter), WREG2
0x0380	0x090010  	REPEAT	#16
0x0382	0x7858B2  	MOV.B	[WREG2++], [WREG1++]
0x0384	0x470060  	ADD	WREG14, #0, WREG0
0x0386	0x780500  	MOV	WREG0, WREG10
0x0388	0x07FF44  	RCALL	_UART1_Write_Text
;distancemeter.c,88 :: 		UART1_Write(13);                              // line feed
0x038A	0x2000DA  	MOV	#13, WREG10
0x038C	0x07FEEC  	RCALL	_UART1_Write
;distancemeter.c,89 :: 		UART1_Write_Text ("Minimum Distance 20cm");   // send value over UART
0x038E	0x4700F1  	ADD	WREG14, #17, WREG1
0x0390	0x2860F2  	MOV	#lo_addr(?ICS?lstr2_distancemeter), WREG2
0x0392	0x090015  	REPEAT	#21
0x0394	0x7858B2  	MOV.B	[WREG2++], [WREG1++]
0x0396	0x470071  	ADD	WREG14, #17, WREG0
0x0398	0x780500  	MOV	WREG0, WREG10
0x039A	0x07FF3B  	RCALL	_UART1_Write_Text
;distancemeter.c,90 :: 		UART1_Write(13);                              // line feed
0x039C	0x2000DA  	MOV	#13, WREG10
0x039E	0x07FEE3  	RCALL	_UART1_Write
;distancemeter.c,91 :: 		UART1_Write_Text ("Maximum Distance 200cm");  // send value over UART
0x03A0	0x200271  	MOV	#39, WREG1
0x03A2	0x470081  	ADD	WREG14, WREG1, WREG1
0x03A4	0x286252  	MOV	#lo_addr(?ICS?lstr3_distancemeter), WREG2
0x03A6	0x090016  	REPEAT	#22
0x03A8	0x7858B2  	MOV.B	[WREG2++], [WREG1++]
0x03AA	0x200270  	MOV	#39, WREG0
0x03AC	0x470000  	ADD	WREG14, WREG0, WREG0
0x03AE	0x780500  	MOV	WREG0, WREG10
0x03B0	0x07FF30  	RCALL	_UART1_Write_Text
;distancemeter.c,92 :: 		UART1_Write(13);                              // line feed
0x03B2	0x2000DA  	MOV	#13, WREG10
0x03B4	0x07FED8  	RCALL	_UART1_Write
;distancemeter.c,93 :: 		UART1_Write_Text ("Measure precision +-10%"); // send value over UART
0x03B6	0x2003E1  	MOV	#62, WREG1
0x03B8	0x470081  	ADD	WREG14, WREG1, WREG1
0x03BA	0x2863C2  	MOV	#lo_addr(?ICS?lstr4_distancemeter), WREG2
0x03BC	0x090017  	REPEAT	#23
0x03BE	0x7858B2  	MOV.B	[WREG2++], [WREG1++]
0x03C0	0x2003E0  	MOV	#62, WREG0
0x03C2	0x470000  	ADD	WREG14, WREG0, WREG0
0x03C4	0x780500  	MOV	WREG0, WREG10
0x03C6	0x07FF25  	RCALL	_UART1_Write_Text
;distancemeter.c,94 :: 		UART1_Write(13);                              // line feed
0x03C8	0x2000DA  	MOV	#13, WREG10
0x03CA	0x07FECD  	RCALL	_UART1_Write
;distancemeter.c,95 :: 		UART1_Write(13);                              // line feed
0x03CC	0x2000DA  	MOV	#13, WREG10
0x03CE	0x07FECB  	RCALL	_UART1_Write
;distancemeter.c,96 :: 		UART1_Write_Text ("Starting measurement");    // send value over UART
0x03D0	0x200561  	MOV	#86, WREG1
0x03D2	0x470081  	ADD	WREG14, WREG1, WREG1
0x03D4	0x286542  	MOV	#lo_addr(?ICS?lstr5_distancemeter), WREG2
0x03D6	0x090014  	REPEAT	#20
0x03D8	0x7858B2  	MOV.B	[WREG2++], [WREG1++]
0x03DA	0x200560  	MOV	#86, WREG0
0x03DC	0x470000  	ADD	WREG14, WREG0, WREG0
0x03DE	0x780500  	MOV	WREG0, WREG10
0x03E0	0x07FF18  	RCALL	_UART1_Write_Text
;distancemeter.c,97 :: 		UART1_Write(13);                              // line feed
0x03E2	0x2000DA  	MOV	#13, WREG10
0x03E4	0x07FEC0  	RCALL	_UART1_Write
;distancemeter.c,98 :: 		UART1_Write(13);                              // line feed
0x03E6	0x2000DA  	MOV	#13, WREG10
0x03E8	0x07FEBE  	RCALL	_UART1_Write
;distancemeter.c,99 :: 		Delay_ms(1200);
0x03EA	0x2007B8  	MOV	#123, WREG8
0x03EC	0x212277  	MOV	#4647, WREG7
L_InitUART0:
0x03EE	0xED200E  	DEC	WREG7
0x03F0	0x3AFFFE  	BRA NZ	L_InitUART0
0x03F2	0xED2010  	DEC	WREG8
0x03F4	0x3AFFFC  	BRA NZ	L_InitUART0
0x03F6	0x000000  	NOP
0x03F8	0x000000  	NOP
;distancemeter.c,100 :: 		}
L_end_InitUART:
0x03FA	0x7805CF  	POP	WREG11
0x03FC	0x78054F  	POP	WREG10
0x03FE	0xF90002  	POP	WREG1
0x0400	0xF90004  	POP	WREG2
0x0402	0xFA8000  	ULNK
0x0404	0x060000  	RETURN
; end of _InitUART
_UART1_Init:
0x0174	0xFA0008  	LNK	#8
;__Lib_UART_12_p30.c,121 :: 		
;__Lib_UART_12_p30.c,124 :: 		
0x0176	0x201660  	MOV	#lo_addr(_UART1_Write), WREG0
0x0178	0x884000  	MOV	WREG0, _UART_Wr_Ptr
;__Lib_UART_12_p30.c,125 :: 		
0x017A	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), WREG0
0x017C	0x884020  	MOV	WREG0, _UART_Rd_Ptr
;__Lib_UART_12_p30.c,126 :: 		
0x017E	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), WREG0
0x0180	0x884040  	MOV	WREG0, _UART_Rdy_Ptr
;__Lib_UART_12_p30.c,127 :: 		
0x0182	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), WREG0
0x0184	0x884030  	MOV	WREG0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p30.c,132 :: 		
0x0186	0xEF220C  	CLR	U1MODE
;__Lib_UART_12_p30.c,133 :: 		
0x0188	0x280000  	MOV	#32768, WREG0
0x018A	0xB7A20E  	MOV	WREG, U1STA
;__Lib_UART_12_p30.c,134 :: 		
0x018C	0x070080  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p30.c,137 :: 		
0x018E	0x203E82  	MOV	#1000, WREG2
0x0190	0x200003  	MOV	#0, WREG3
0x0192	0x070074  	RCALL	__Multiply_32x32
; tmp start address is: 10 (W5)
0x0194	0x780280  	MOV	WREG0, WREG5
0x0196	0x780301  	MOV	WREG1, WREG6
;__Lib_UART_12_p30.c,140 :: 		
0x0198	0x200064  	MOV	#6, WREG4
0x019A	0xBE010A  	MOV.D	WREG10, WREG2
L__UART1_Init50:
0x019C	0xE90204  	DEC	WREG4, WREG4
0x019E	0x350003  	BRA LT	L__UART1_Init51
0x01A0	0xD00102  	SL	WREG2, WREG2
0x01A2	0xD28183  	RLC	WREG3, WREG3
0x01A4	0x37FFFB  	BRA	L__UART1_Init50
L__UART1_Init51:
0x01A6	0x980702  	MOV	WREG2, [WREG14+0]
0x01A8	0x980713  	MOV	WREG3, [WREG14+2]
;__Lib_UART_12_p30.c,142 :: 		
0x01AA	0x781F85  	PUSH	WREG5
0x01AC	0x781F86  	PUSH	WREG6
0x01AE	0xEB0200  	CLR	WREG4
0x01B0	0x07FFA7  	RCALL	__Modulus_32x32
0x01B2	0x78034F  	POP	WREG6
0x01B4	0x7802CF  	POP	WREG5
0x01B6	0x980720  	MOV	WREG0, [WREG14+4]
0x01B8	0x980731  	MOV	WREG1, [WREG14+6]
;__Lib_UART_12_p30.c,143 :: 		
0x01BA	0x780005  	MOV	WREG5, WREG0
0x01BC	0x780086  	MOV	WREG6, WREG1
0x01BE	0x90010E  	MOV	[WREG14+0], WREG2
0x01C0	0x90019E  	MOV	[WREG14+2], WREG3
0x01C2	0xEB0200  	CLR	WREG4
0x01C4	0x070067  	RCALL	__Divide_32x32
; tmp end address is: 10 (W5)
; tmp start address is: 6 (W3)
0x01C6	0x780180  	MOV	WREG0, WREG3
0x01C8	0x780201  	MOV	WREG1, WREG4
;__Lib_UART_12_p30.c,145 :: 		
0x01CA	0x470060  	ADD	WREG14, #0, WREG0
0x01CC	0x7800B0  	MOV	[WREG0++], WREG1
0x01CE	0x780120  	MOV	[WREG0--], WREG2
0x01D0	0xD10102  	LSR	WREG2, WREG2
0x01D2	0xD38081  	RRC	WREG1, WREG1
0x01D4	0x470064  	ADD	WREG14, #4, WREG0
0x01D6	0xE10830  	CP	WREG1, [WREG0++]
0x01D8	0xE19020  	CPB	WREG2, [WREG0--]
0x01DA	0x310003  	BRA GEU	L__UART1_Init31
L__UART1_Init52:
;__Lib_UART_12_p30.c,146 :: 		
; tmp start address is: 4 (W2)
0x01DC	0x418161  	ADD	WREG3, #1, WREG2
0x01DE	0x4A01E0  	ADDC	WREG4, #0, WREG3
; tmp end address is: 6 (W3)
; tmp end address is: 4 (W2)
0x01E0	0x370002  	BRA	L_UART1_Init13
L__UART1_Init31:
;__Lib_UART_12_p30.c,145 :: 		
0x01E2	0x780103  	MOV	WREG3, WREG2
0x01E4	0x780184  	MOV	WREG4, WREG3
;__Lib_UART_12_p30.c,146 :: 		
L_UART1_Init13:
;__Lib_UART_12_p30.c,150 :: 		
; tmp start address is: 4 (W2)
0x01E6	0x510061  	SUB	WREG2, #1, WREG0
0x01E8	0x5980E0  	SUBB	WREG3, #0, WREG1
; tmp end address is: 4 (W2)
0x01EA	0x8810A0  	MOV	WREG0, U1BRG
;__Lib_UART_12_p30.c,151 :: 		
0x01EC	0xA9220E  	BCLR	U1STA, #1
;__Lib_UART_12_p30.c,153 :: 		
0x01EE	0xA8E20D  	BSET	U1MODE, #15
;__Lib_UART_12_p30.c,154 :: 		
0x01F0	0xA8420F  	BSET	U1STA, #10
;__Lib_UART_12_p30.c,155 :: 		
0x01F2	0x07FFB2  	RCALL	_Delay_100ms
0x01F4	0x07FFB1  	RCALL	_Delay_100ms
;__Lib_UART_12_p30.c,157 :: 		
L_end_UART1_Init:
0x01F6	0xFA8000  	ULNK
0x01F8	0x060000  	RETURN
; end of _UART1_Init
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0158	0x2000B8  	MOV	#11, WREG8
0x015A	0x22C2D7  	MOV	#11309, WREG7
L_Delay_100ms33:
0x015C	0xED200E  	DEC	WREG7
0x015E	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0160	0xED2010  	DEC	WREG8
0x0162	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0164	0x060000  	RETURN
; end of _Delay_100ms
__Modulus_32x32:
0x0100	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0102	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0104	0x000000040154  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0108	0xE20008  	CP0	WREG4
;__Lib_Math.c,173 :: 		
0x010A	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x010C	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x010E	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0110	0x781F81  	MOV	WREG1, [WREG15++]
;__Lib_Math.c,180 :: 		
0x0112	0xE20002  	CP0	WREG1
;__Lib_Math.c,181 :: 		
0x0114	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x0116	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,183 :: 		
0x0118	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x011A	0xE20006  	CP0	WREG3
;__Lib_Math.c,186 :: 		
0x011C	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x011E	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,188 :: 		
0x0120	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0122	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0124	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,192 :: 		
0x0126	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x0128	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,194 :: 		
0x012A	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x012C	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x012E	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0130	0xBE8004  	MOV.D	WREG4, WREG0
;__Lib_Math.c,200 :: 		
0x0132	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0134	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,203 :: 		
0x0136	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0138	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,206 :: 		
0x013A	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,207 :: 		
0x013C	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,208 :: 		
0x013E	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,209 :: 		
0x0140	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,210 :: 		
0x0142	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,211 :: 		
0x0144	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,212 :: 		
0x0146	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0148	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,214 :: 		
0x014A	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,215 :: 		
0x014C	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x014E	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,218 :: 		
0x0150	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0152	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x0154	0xFA8000  	ULNK
0x0156	0x060000  	RETURN
; end of __Modulus_32x32
_UART1_Write_Text:
0x0212	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,59 :: 		
;__Lib_UART_12_p30.c,60 :: 		
; counter start address is: 2 (W1)
0x0214	0xEF2002  	CLR	WREG1
;__Lib_UART_12_p30.c,62 :: 		
; data_ start address is: 0 (W0)
; data_ start address is: 0 (W0)
0x0216	0x78401A  	MOV.B	[WREG10], WREG0
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
; data_ end address is: 0 (W0)
;__Lib_UART_12_p30.c,63 :: 		
L_UART1_Write_Text2:
; data_ start address is: 0 (W0)
; counter start address is: 2 (W1)
0x0218	0xE10460  	CP.B	WREG0, #0
0x021A	0x32000A  	BRA Z	L_UART1_Write_Text3
L__UART1_Write_Text38:
;__Lib_UART_12_p30.c,64 :: 		
0x021C	0x781F8A  	PUSH	WREG10
; data_ end address is: 0 (W0)
0x021E	0xFB8500  	ZE	WREG0, WREG10
0x0220	0x07FFA2  	RCALL	_UART1_Write
0x0222	0x78054F  	POP	WREG10
;__Lib_UART_12_p30.c,65 :: 		
0x0224	0x40C061  	ADD.B	WREG1, #1, WREG0
0x0226	0x784080  	MOV.B	WREG0, WREG1
;__Lib_UART_12_p30.c,66 :: 		
0x0228	0xFB8000  	ZE	WREG0, WREG0
0x022A	0x450000  	ADD	WREG10, WREG0, WREG0
; data_ start address is: 0 (W0)
0x022C	0x784010  	MOV.B	[WREG0], WREG0
;__Lib_UART_12_p30.c,67 :: 		
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x022E	0x37FFF4  	BRA	L_UART1_Write_Text2
L_UART1_Write_Text3:
;__Lib_UART_12_p30.c,68 :: 		
L_end_UART1_Write_Text:
0x0230	0xFA8000  	ULNK
0x0232	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x0166	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,53 :: 		
;__Lib_UART_12_p30.c,54 :: 		
L_UART1_Write0:
0x0168	0xAF020F  	BTSC	U1STA, #8
0x016A	0x370001  	BRA	L_UART1_Write1
0x016C	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p30.c,55 :: 		
0x016E	0x88108A  	MOV	WREG10, U1TXREG
;__Lib_UART_12_p30.c,56 :: 		
L_end_UART1_Write:
0x0170	0xFA8000  	ULNK
0x0172	0x060000  	RETURN
; end of _UART1_Write
_InitDelay:
;distancemeter.c,68 :: 		void InitDelay(void) {                          // Initialization of Timer2
;distancemeter.c,69 :: 		T2CON.B5 = 0;                                 // prescaler 1:8
0x0304	0xA9A110  	BCLR	T2CON, #5
;distancemeter.c,70 :: 		T2CON.B4 = 1;
0x0306	0xA88110  	BSET	T2CON, #4
;distancemeter.c,71 :: 		TMR2 = 0x0000;                                // Initial value of TMR2 register
0x0308	0xEF2106  	CLR	TMR2
;distancemeter.c,72 :: 		T2CON.TON = 1;                                // start Timer2
0x030A	0xA8E111  	BSET	T2CON, #15
;distancemeter.c,73 :: 		}
L_end_InitDelay:
0x030C	0x060000  	RETURN
; end of _InitDelay
_ADC1_Get_Sample:
0x02E6	0xFA0000  	LNK	#0
;__Lib_ADC_1_p24FJ_p30.c,64 :: 		
;__Lib_ADC_1_p24FJ_p30.c,66 :: 		
0x02E8	0x200010  	MOV	#1, WREG0
0x02EA	0xDD000A  	SL	WREG0, WREG10, WREG0
0x02EC	0xEA8080  	COM	WREG0, WREG1
0x02EE	0x202A80  	MOV	#lo_addr(ADPCFG), WREG0
0x02F0	0x608810  	AND	WREG1, [WREG0], [WREG0]
;__Lib_ADC_1_p24FJ_p30.c,67 :: 		
0x02F2	0x88153A  	MOV	WREG10, ADCHS
;__Lib_ADC_1_p24FJ_p30.c,68 :: 		
0x02F4	0xA822A0  	BSET	ADCON1, #1
;__Lib_ADC_1_p24FJ_p30.c,70 :: 		
L_ADC1_Get_Sample0:
0x02F6	0xAF02A0  	BTSC	ADCON1, #0
0x02F8	0x370001  	BRA	L_ADC1_Get_Sample1
;__Lib_ADC_1_p24FJ_p30.c,71 :: 		
0x02FA	0x37FFFD  	BRA	L_ADC1_Get_Sample0
L_ADC1_Get_Sample1:
;__Lib_ADC_1_p24FJ_p30.c,72 :: 		
0x02FC	0xA902A0  	BCLR	ADCON1, #0
;__Lib_ADC_1_p24FJ_p30.c,73 :: 		
0x02FE	0xBF8280  	MOV	ADCBUF0, WREG
;__Lib_ADC_1_p24FJ_p30.c,74 :: 		
L_end_ADC1_Get_Sample:
0x0300	0xFA8000  	ULNK
0x0302	0x060000  	RETURN
; end of _ADC1_Get_Sample
_InitVariable:
;distancemeter.c,79 :: 		void InitVariable(void) {                       // setting initial values
;distancemeter.c,80 :: 		abc = 0;
0x030E	0xEF2000  	CLR	WREG0
0x0310	0x884090  	MOV	WREG0, _abc
;distancemeter.c,81 :: 		temp_old = 0;
0x0312	0xEF2000  	CLR	WREG0
0x0314	0x884080  	MOV	WREG0, _temp_old
;distancemeter.c,82 :: 		distance = 0;
0x0316	0xEF2000  	CLR	WREG0
0x0318	0x884050  	MOV	WREG0, _distance
;distancemeter.c,83 :: 		}
L_end_InitVariable:
0x031A	0x060000  	RETURN
; end of _InitVariable
_IntToStr:
0x031C	0xFA0000  	LNK	#0
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x031E	0x781F8A  	PUSH	WREG10
; negative start address is: 8 (W4)
0x0320	0xEF2008  	CLR	WREG4
;__Lib_Conversions.c,153 :: 		
; inword start address is: 0 (W0)
0x0322	0x78000A  	MOV	WREG10, WREG0
;__Lib_Conversions.c,154 :: 		
0x0324	0xE15060  	CP	WREG10, #0
0x0326	0x3D0003  	BRA GE	L__IntToStr95
L__IntToStr129:
; inword end address is: 0 (W0)
;__Lib_Conversions.c,155 :: 		
0x0328	0x200014  	MOV	#1, WREG4
;__Lib_Conversions.c,156 :: 		
; inword start address is: 0 (W0)
0x032A	0x150060  	SUBR	WREG10, #0, WREG0
; inword end address is: 0 (W0)
; negative end address is: 8 (W4)
;__Lib_Conversions.c,157 :: 		
0x032C	0x370000  	BRA	L_IntToStr23
L__IntToStr95:
;__Lib_Conversions.c,154 :: 		
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
; inword start address is: 0 (W0)
; negative start address is: 8 (W4)
0x032E	0x780500  	MOV	WREG0, WREG10
; inword end address is: 0 (W0)
0x0330	0x07FF81  	RCALL	_WordToStr
;__Lib_Conversions.c,160 :: 		
; i start address is: 6 (W3)
; i start address is: 6 (W3)
0x0332	0x200063  	MOV	#6, WREG3
; negative end address is: 8 (W4)
; i end address is: 6 (W3)
; i end address is: 6 (W3)
0x0334	0x780104  	MOV	WREG4, WREG2
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
; i start address is: 6 (W3)
; negative start address is: 4 (W2)
0x0336	0xE11860  	CP	WREG3, #0
0x0338	0x360006  	BRA LEU	L_IntToStr25
L__IntToStr130:
;__Lib_Conversions.c,162 :: 		
0x033A	0x458083  	ADD	WREG11, WREG3, WREG1
0x033C	0x518061  	SUB	WREG3, #1, WREG0
0x033E	0x458000  	ADD	WREG11, WREG0, WREG0
0x0340	0x784890  	MOV.B	[WREG0], [WREG1]
;__Lib_Conversions.c,163 :: 		
; i start address is: 6 (W3)
0x0342	0xED2006  	DEC	WREG3
; i end address is: 6 (W3)
;__Lib_Conversions.c,164 :: 		
; i end address is: 6 (W3)
0x0344	0x37FFF8  	BRA	L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x0346	0xB3C200  	MOV.B	#32, WREG0
0x0348	0x784D80  	MOV.B	WREG0, [WREG11]
;__Lib_Conversions.c,166 :: 		
0x034A	0xE20004  	CP0	WREG2
0x034C	0x32000C  	BRA Z	L_IntToStr26
L__IntToStr131:
; negative end address is: 4 (W2)
;__Lib_Conversions.c,167 :: 		
; i start address is: 4 (W2)
; i start address is: 4 (W2)
0x034E	0xEF2004  	CLR	WREG2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
; i start address is: 4 (W2)
0x0350	0x458002  	ADD	WREG11, WREG2, WREG0
0x0352	0x784090  	MOV.B	[WREG0], WREG1
0x0354	0xB3C200  	MOV.B	#32, WREG0
0x0356	0xE10C00  	CP.B	WREG1, WREG0
0x0358	0x3A0002  	BRA NZ	L_IntToStr28
L__IntToStr132:
; i start address is: 4 (W2)
0x035A	0xEC2004  	INC	WREG2
; i end address is: 4 (W2)
0x035C	0x37FFF9  	BRA	L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x035E	0x510061  	SUB	WREG2, #1, WREG0
; i end address is: 4 (W2)
;__Lib_Conversions.c,170 :: 		
0x0360	0x458080  	ADD	WREG11, WREG0, WREG1
0x0362	0xB3C2D0  	MOV.B	#45, WREG0
0x0364	0x784880  	MOV.B	WREG0, [WREG1]
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x0366	0x78054F  	POP	WREG10
0x0368	0xFA8000  	ULNK
0x036A	0x060000  	RETURN
; end of _IntToStr
_WordToStr:
0x0234	0xFA0002  	LNK	#2
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
; len start address is: 4 (W2)
; len start address is: 4 (W2)
0x0236	0xEF2004  	CLR	WREG2
; len end address is: 4 (W2)
; len end address is: 4 (W2)
L_WordToStr6:
; len start address is: 4 (W2)
0x0238	0xE11465  	CP.B	WREG2, #5
0x023A	0x310006  	BRA GEU	L_WordToStr7
L__WordToStr118:
;__Lib_Conversions.c,90 :: 		
0x023C	0xFB8002  	ZE	WREG2, WREG0
0x023E	0x458080  	ADD	WREG11, WREG0, WREG1
0x0240	0xB3C200  	MOV.B	#32, WREG0
0x0242	0x784880  	MOV.B	WREG0, [WREG1]
;__Lib_Conversions.c,89 :: 		
; len start address is: 4 (W2)
0x0244	0xEC6004  	INC.B	WREG2
; len end address is: 4 (W2)
;__Lib_Conversions.c,90 :: 		
0x0246	0x37FFF8  	BRA	L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x0248	0xFB8002  	ZE	WREG2, WREG0
0x024A	0x458080  	ADD	WREG11, WREG0, WREG1
0x024C	0xEF2000  	CLR	WREG0
0x024E	0x784880  	MOV.B	WREG0, [WREG1]
; len start address is: 6 (W3)
0x0250	0x5141E1  	SUB.B	WREG2, #1, WREG3
; len end address is: 4 (W2)
; len end address is: 6 (W3)
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
; len start address is: 6 (W3)
;__Lib_Conversions.c,94 :: 		
0x0252	0xFB8003  	ZE	WREG3, WREG0
0x0254	0x458000  	ADD	WREG11, WREG0, WREG0
0x0256	0x980700  	MOV	WREG0, [WREG14+0]
0x0258	0x2000A2  	MOV	#10, WREG2
0x025A	0x090011  	REPEAT	#17
0x025C	0xD88502  	DIV.U	WREG10, WREG2
0x025E	0x200300  	MOV	#48, WREG0
0x0260	0x408080  	ADD	WREG1, WREG0, WREG1
0x0262	0x90000E  	MOV	[WREG14+0], WREG0
0x0264	0x784801  	MOV.B	WREG1, [WREG0]
;__Lib_Conversions.c,95 :: 		
0x0266	0x2000A2  	MOV	#10, WREG2
0x0268	0x090011  	REPEAT	#17
0x026A	0xD88502  	DIV.U	WREG10, WREG2
0x026C	0x780500  	MOV	WREG0, WREG10
;__Lib_Conversions.c,96 :: 		
0x026E	0xE10060  	CP	WREG0, #0
0x0270	0x3A0001  	BRA NZ	L_WordToStr11
L__WordToStr119:
; len end address is: 6 (W3)
;__Lib_Conversions.c,97 :: 		
0x0272	0x370002  	BRA	L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
; len start address is: 6 (W3)
; len start address is: 6 (W3)
0x0274	0xED6006  	DEC.B	WREG3
; len end address is: 6 (W3)
;__Lib_Conversions.c,99 :: 		
; len end address is: 6 (W3)
0x0276	0x37FFED  	BRA	L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x0278	0xFA8000  	ULNK
0x027A	0x060000  	RETURN
; end of _WordToStr
_Timer1Int:
0x0432	0xF80036  	PUSH	RCOUNT
0x0434	0x781F80  	PUSH	WREG0
0x0436	0x200020  	MOV	#2, WREG0
0x0438	0x09000C  	REPEAT	#12
0x043A	0x781FB0  	PUSH	[WREG0++]
;distancemeter.c,49 :: 		void Timer1Int() iv IVT_ADDR_T1INTERRUPT {      // Timer interrupt, sample with 40kHz
;distancemeter.c,50 :: 		LATC = ~PORTC;                                // invert PortC for generating signal
0x043C	0x202D01  	MOV	#lo_addr(LATC), WREG1
0x043E	0xBF82CE  	MOV	PORTC, WREG
0x0440	0xEA8880  	COM	WREG0, [WREG1]
;distancemeter.c,51 :: 		IFS0.T1IF = 0;                                // clear interrupt flag
0x0442	0xA96084  	BCLR	IFS0, #3
;distancemeter.c,52 :: 		}
L_end_Timer1Int:
0x0444	0x2001A0  	MOV	#26, WREG0
0x0446	0x09000C  	REPEAT	#12
0x0448	0x78104F  	POP	[WREG0--]
0x044A	0x78004F  	POP	WREG0
0x044C	0xF90036  	POP	RCOUNT
0x044E	0x064000  	RETFIE
; end of _Timer1Int
;,0 :: _initBlock_0 [62]
; Containing: ?ICS?lstr1_distancemeter [17]
;             ?ICS?lstr2_distancemeter [22]
;             ?ICS?lstr3_distancemeter [23]
0x05FE	0x6944 ;_initBlock_0+0 : ?ICS?lstr1_distancemeter at 0x05FE
0x0600	0x7473 ;_initBlock_0+2
0x0602	0x6E61 ;_initBlock_0+4
0x0604	0x6563 ;_initBlock_0+6
0x0606	0x4D20 ;_initBlock_0+8
0x0608	0x7465 ;_initBlock_0+10
0x060A	0x7265 ;_initBlock_0+12
0x060C	0x3220 ;_initBlock_0+14
0x060E	0x4D00 ;_initBlock_0+16 : ?ICS?lstr2_distancemeter at 0x060F
0x0610	0x6E69 ;_initBlock_0+18
0x0612	0x6D69 ;_initBlock_0+20
0x0614	0x6D75 ;_initBlock_0+22
0x0616	0x4420 ;_initBlock_0+24
0x0618	0x7369 ;_initBlock_0+26
0x061A	0x6174 ;_initBlock_0+28
0x061C	0x636E ;_initBlock_0+30
0x061E	0x2065 ;_initBlock_0+32
0x0620	0x3032 ;_initBlock_0+34
0x0622	0x6D63 ;_initBlock_0+36
0x0624	0x4D00 ;_initBlock_0+38 : ?ICS?lstr3_distancemeter at 0x0625
0x0626	0x7861 ;_initBlock_0+40
0x0628	0x6D69 ;_initBlock_0+42
0x062A	0x6D75 ;_initBlock_0+44
0x062C	0x4420 ;_initBlock_0+46
0x062E	0x7369 ;_initBlock_0+48
0x0630	0x6174 ;_initBlock_0+50
0x0632	0x636E ;_initBlock_0+52
0x0634	0x2065 ;_initBlock_0+54
0x0636	0x3032 ;_initBlock_0+56
0x0638	0x6330 ;_initBlock_0+58
0x063A	0x006D ;_initBlock_0+60
; end of _initBlock_0
;distancemeter.c,0 :: ?ICS?lstr4_distancemeter [24]
0x063C	0x654D ;?ICS?lstr4_distancemeter+0
0x063E	0x7361 ;?ICS?lstr4_distancemeter+2
0x0640	0x7275 ;?ICS?lstr4_distancemeter+4
0x0642	0x2065 ;?ICS?lstr4_distancemeter+6
0x0644	0x7270 ;?ICS?lstr4_distancemeter+8
0x0646	0x6365 ;?ICS?lstr4_distancemeter+10
0x0648	0x7369 ;?ICS?lstr4_distancemeter+12
0x064A	0x6F69 ;?ICS?lstr4_distancemeter+14
0x064C	0x206E ;?ICS?lstr4_distancemeter+16
0x064E	0x2D2B ;?ICS?lstr4_distancemeter+18
0x0650	0x3031 ;?ICS?lstr4_distancemeter+20
0x0652	0x0025 ;?ICS?lstr4_distancemeter+22
; end of ?ICS?lstr4_distancemeter
;,0 :: _initBlock_2 [30]
; Containing: ?ICS?lstr5_distancemeter [21]
;             ?ICS?lstr6_distancemeter [9]
0x0654	0x7453 ;_initBlock_2+0 : ?ICS?lstr5_distancemeter at 0x0654
0x0656	0x7261 ;_initBlock_2+2
0x0658	0x6974 ;_initBlock_2+4
0x065A	0x676E ;_initBlock_2+6
0x065C	0x6D20 ;_initBlock_2+8
0x065E	0x6165 ;_initBlock_2+10
0x0660	0x7573 ;_initBlock_2+12
0x0662	0x6572 ;_initBlock_2+14
0x0664	0x656D ;_initBlock_2+16
0x0666	0x746E ;_initBlock_2+18
0x0668	0x5400 ;_initBlock_2+20 : ?ICS?lstr6_distancemeter at 0x0669
0x066A	0x6F6F ;_initBlock_2+22
0x066C	0x4620 ;_initBlock_2+24
0x066E	0x7261 ;_initBlock_2+26
0x0670	0x0021 ;_initBlock_2+28
; end of _initBlock_2
;distancemeter.c,0 :: ?ICS?lstr7_distancemeter [4]
0x0672	0x6320 ;?ICS?lstr7_distancemeter+0
0x0674	0x006D ;?ICS?lstr7_distancemeter+2
; end of ?ICS?lstr7_distancemeter
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [88]    __Modulus_32x32
0x0158      [14]    _Delay_100ms
0x0166      [14]    _UART1_Write
0x0174     [134]    _UART1_Init
0x01FA      [24]    _ADC1_Init
0x0212      [34]    _UART1_Write_Text
0x0234      [72]    _WordToStr
0x027C      [18]    __Multiply_32x32
0x028E       [6]    _Get_Fosc_kHz
0x0294      [82]    __Divide_32x32
0x02E6      [30]    _ADC1_Get_Sample
0x0304      [10]    _InitDelay
0x030E      [14]    _InitVariable
0x031C      [80]    _IntToStr
0x036C     [154]    _InitUART
0x0406       [4]    _InitADC
0x040A      [14]    _InitPort
0x0418      [26]    _InitTimer
0x0432      [30]    _Timer1Int
0x0450     [430]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x02A4       [2]    ADCON3
0x02A2       [2]    ADCON2
0x0800       [2]    _UART_Wr_Ptr
0x02AA       [2]    ADCSSL
0x02A0       [2]    ADCON1
0x02A6       [2]    ADCHS
0x0802       [2]    _ADC_Get_Sample_Ptr
0x0280       [2]    ADCBUF0
0x0804       [2]    _UART_Rd_Ptr
0x0210       [2]    U1TXREG
0x0214       [2]    U1BRG
0x0084       [2]    IFS0
0x02D0       [2]    LATC
0x0806       [2]    _UART_Tx_Idle_Ptr
0x0808       [2]    _UART_Rdy_Ptr
0x020E       [2]    U1STA
0x020C       [2]    U1MODE
0x008C       [2]    IEC0
0x080A       [2]    _distance
0x080C       [2]    _temp_sec
0x080E       [2]    _temp
0x0106       [2]    TMR2
0x0110       [2]    T2CON
0x0810       [2]    _temp_old
0x0812       [2]    _abc
0x0814       [2]    _time
0x0104       [2]    T1CON
0x02C6       [2]    TRISB
0x0104       [0]    TON_bit
0x0102       [2]    PR1
0x02A8       [2]    ADPCFG
0x0816       [6]    _txt
0x02CE       [2]    PORTC
0x02CC       [2]    TRISC
0x0020       [2]    SPLIM
0x0022       [2]    ACCAL
0x0024       [2]    ACCAH
0x0026       [2]    ACCAU
0x0028       [2]    ACCBL
0x002A       [2]    ACCBH
0x002C       [2]    ACCBU
0x002E       [2]    PCL
0x0030       [2]    PCH
0x0032       [2]    TBLPAG
0x0034       [2]    PSVPAG
0x0036       [2]    RCOUNT
0x0038       [2]    DCOUNT
0x003A       [2]    DOSTARTL
0x003C       [2]    DOSTARTH
0x003E       [2]    DOENDL
0x0040       [2]    DOENDH
0x0042       [2]    SR
0x0044       [2]    CORCON
0x0046       [2]    MODCON
0x0048       [2]    XMODSRT
0x004A       [2]    XMODEND
0x004C       [2]    YMODSRT
0x004E       [2]    YMODEND
0x0050       [2]    XBREV
0x0052       [2]    DISICNT
0x0080       [2]    INTCON1
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x0086       [2]    IFS1
0x0088       [2]    IFS2
0x008C       [2]    IEC0
0x008E       [2]    IEC1
0x0090       [2]    IEC2
0x0094       [2]    IPC0
0x0096       [2]    IPC1
0x0098       [2]    IPC2
0x009A       [2]    IPC3
0x009C       [2]    IPC4
0x009E       [2]    IPC5
0x00A0       [2]    IPC6
0x00A8       [2]    IPC10
0x00B0       [2]    INTTREG
0x00C0       [2]    CNEN1
0x00C2       [2]    CNEN2
0x00C4       [2]    CNPU1
0x00C6       [2]    CNPU2
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x0108       [2]    TMR3HLD
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0114       [2]    TMR4
0x0116       [2]    TMR5HLD
0x0118       [2]    TMR5
0x011A       [2]    PR4
0x011C       [2]    PR5
0x011E       [2]    T4CON
0x0120       [2]    T5CON
0x0140       [2]    IC1BUF
0x0142       [2]    IC1CON
0x0144       [2]    IC2BUF
0x0146       [2]    IC2CON
0x0158       [2]    IC7BUF
0x015A       [2]    IC7CON
0x015C       [2]    IC8BUF
0x015E       [2]    IC8CON
0x0014       [2]    FARG_UART1_Write__data
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0180       [2]    OC1RS
0x0182       [2]    OC1R
0x0184       [2]    OC1CON
0x0186       [2]    OC2RS
0x0188       [2]    OC2R
0x018A       [2]    OC2CON
0x018C       [2]    OC3RS
0x018E       [2]    OC3R
0x0190       [2]    OC3CON
0x0192       [2]    OC4RS
0x0194       [2]    OC4R
0x0196       [2]    OC4CON
0x0200       [2]    I2CRCV
0x0202       [2]    I2CTRN
0x0204       [2]    I2CBRG
0x0206       [2]    I2CCON
0x0208       [2]    I2CSTAT
0x020A       [2]    I2CADD
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0212       [2]    U1RXREG
0x0214       [2]    U1BRG
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x0220       [2]    SPI1STAT
0x0222       [2]    SPI1CON
0x0224       [2]    SPI1BUF
0x0014       [2]    FARG_WordToStr_input
0x0016       [2]    FARG_WordToStr_output
0x0240       [2]    DCICON1
0x0242       [2]    DCICON2
0x0244       [2]    DCICON3
0x0246       [2]    DCISTAT
0x0248       [2]    TSCON
0x024C       [2]    RSCON
0x0250       [2]    RXBUF0
0x0252       [2]    RXBUF1
0x0254       [2]    RXBUF2
0x0256       [2]    RXBUF3
0x0258       [2]    TXBUF0
0x025A       [2]    TXBUF1
0x025C       [2]    TXBUF2
0x025E       [2]    TXBUF3
0x0280       [2]    ADCBUF0
0x0282       [2]    ADCBUF1
0x0284       [2]    ADCBUF2
0x0286       [2]    ADCBUF3
0x0288       [2]    ADCBUF4
0x028A       [2]    ADCBUF5
0x028C       [2]    ADCBUF6
0x028E       [2]    ADCBUF7
0x0290       [2]    ADCBUF8
0x0292       [2]    ADCBUF9
0x0294       [2]    ADCBUFA
0x0296       [2]    ADCBUFB
0x0298       [2]    ADCBUFC
0x029A       [2]    ADCBUFD
0x029C       [2]    ADCBUFE
0x029E       [2]    ADCBUFF
0x02A0       [2]    ADCON1
0x02A2       [2]    ADCON2
0x02A4       [2]    ADCON3
0x02A6       [2]    ADCHS
0x02A8       [2]    ADPCFG
0x02AA       [2]    ADCSSL
0x02C0       [2]    TRISA
0x02C2       [2]    PORTA
0x02C4       [2]    LATA
0x02C6       [2]    TRISB
0x02C8       [2]    PORTB
0x02CA       [2]    LATB
0x02CC       [2]    TRISC
0x02CE       [2]    PORTC
0x02D0       [2]    LATC
0x02D2       [2]    TRISD
0x02D4       [2]    PORTD
0x02D6       [2]    LATD
0x02DE       [2]    TRISF
0x02E0       [2]    PORTF
0x02E2       [2]    LATF
0x0014       [2]    FARG_ADC1_Get_Sample_channel
0x0300       [2]    C1RXF0SID
0x0302       [2]    C1RXF0EIDH
0x0304       [2]    C1RXF0EIDL
0x0308       [2]    C1RXF1SID
0x030A       [2]    C1RXF1EIDH
0x030C       [2]    C1RXF1EIDL
0x0310       [2]    C1RXF2SID
0x0312       [2]    C1RXF2EIDH
0x0314       [2]    C1RXF2EIDL
0x0318       [2]    C1RXF3SID
0x031A       [2]    C1RXF3EIDH
0x0014       [2]    FARG_IntToStr_input
0x0016       [2]    FARG_IntToStr_output
0x031C       [2]    C1RXF3EIDL
0x0320       [2]    C1RXF4SID
0x0322       [2]    C1RXF4EIDH
0x0324       [2]    C1RXF4EIDL
0x0328       [2]    C1RXF5SID
0x032A       [2]    C1RXF5EIDH
0x032C       [2]    C1RXF5EIDL
0x0330       [2]    C1RXM0SID
0x0332       [2]    C1RXM0EIDH
0x0334       [2]    C1RXM0EIDL
0x0338       [2]    C1RXM1SID
0x033A       [2]    C1RXM1EIDH
0x033C       [2]    C1RXM1EIDL
0x0340       [2]    C1TX2SID
0x0342       [2]    C1TX2EID
0x0344       [2]    C1TX2DLC
0x0346       [2]    C1TX2B1
0x0348       [2]    C1TX2B2
0x034A       [2]    C1TX2B3
0x034C       [2]    C1TX2B4
0x034E       [2]    C1TX2CON
0x0350       [2]    C1TX1SID
0x0352       [2]    C1TX1EID
0x0354       [2]    C1TX1DLC
0x0356       [2]    C1TX1B1
0x0358       [2]    C1TX1B2
0x035A       [2]    C1TX1B3
0x035C       [2]    C1TX1B4
0x035E       [2]    C1TX1CON
0x0360       [2]    C1TX0SID
0x0362       [2]    C1TX0EID
0x0364       [2]    C1TX0DLC
0x0366       [2]    C1TX0B1
0x0368       [2]    C1TX0B2
0x036A       [2]    C1TX0B3
0x036C       [2]    C1TX0B4
0x036E       [2]    C1TX0CON
0x0370       [2]    C1RX1SID
0x0372       [2]    C1RX1EID
0x0374       [2]    C1RX1DLC
0x0376       [2]    C1RX1B1
0x0378       [2]    C1RX1B2
0x037A       [2]    C1RX1B3
0x037C       [2]    C1RX1B4
0x037E       [2]    C1RX1CON
0x0380       [2]    C1RX0SID
0x0382       [2]    C1RX0EID
0x0384       [2]    C1RX0DLC
0x0386       [2]    C1RX0B1
0x0388       [2]    C1RX0B2
0x038A       [2]    C1RX0B3
0x038C       [2]    C1RX0B4
0x038E       [2]    C1RX0CON
0x0390       [2]    C1CTRL
0x0392       [2]    C1CFG1
0x0394       [2]    C1CFG2
0x0396       [2]    C1INTF
0x0398       [2]    C1INTE
0x039A       [2]    C1RERRCNT
0x039A       [2]    C1EC
0x0740       [2]    RCON
0x0742       [2]    OSCCON
0x0760       [2]    NVMCON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x0766       [2]    NVMKEY
0x0770       [2]    PMD1
0x0772       [2]    PMD2
0x0774       [2]    PMD3
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x05FE      [17]    ?ICS?lstr1_distancemeter
0x060F      [22]    ?ICS?lstr2_distancemeter
0x0625      [23]    ?ICS?lstr3_distancemeter
0x063C      [24]    ?ICS?lstr4_distancemeter
0x0654      [21]    ?ICS?lstr5_distancemeter
0x0669       [9]    ?ICS?lstr6_distancemeter
0x0672       [4]    ?ICS?lstr7_distancemeter
//** Label List: ** 
//----------------------------------------------
  L_InitUART0
  L_main2
  L_main3
  L_main4
  L_main6
  L_main8
  L_main10
  L_main11
  L_main12
  L_main14
  L_main16
  L_main17
  L_main18
  L_main19
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L_end_Timer1Int
  _Timer1Int
  L_end_InitPort
  _InitPort
  L_end_InitTimer
  _InitTimer
  L_end_InitDelay
  _InitDelay
  L_end_InitADC
  _InitADC
  L_end_InitVariable
  _InitVariable
  L_end_InitUART
  _InitUART
  L_end_main
  _main
  L__main71
  L__main72
  L__main73
  L__main74
  L__main75
  L__main76
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L_ADC1_Get_Sample0
  L_ADC1_Get_Sample1
  L_end_ADC1_Init
  _ADC1_Init
  L_end_ADC1_Init_Advanced
  _ADC1_Init_Advanced
  L_end_ADC1_Get_Sample
  _ADC1_Get_Sample
  L_end_ADC1_Read
  _ADC1_Read
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_LongWordToStr37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStrWithZeros43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongToStr48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongIntToStrWithZeros54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_Dec2Bcd62
  L_Dec2Bcd63
  L_Rtrim64
  L_Rtrim65
  L_Ltrim66
  L_Ltrim67
  L_Ltrim68
  L_Ltrim69
  L_Ltrim70
  L_Ltrim71
  L_FloatToStr72
  L_FloatToStr73
  L_FloatToStr74
  L_FloatToStr75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L__ShortToStr94
  L__IntToStr95
  L__IntToStrWithZeros96
  L__LongToStr97
  L__Ltrim98
  L__Ltrim99
  L__Ltrim100
  L__Ltrim101
  L__FloatToStr102
  L__FloatToStr103
  L__FloatToStr104
  L__FloatToStr105
  L__FloatToStr106
  L__FloatToStr107
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr115
  L__ByteToStr116
  L_end_WordToStr
  _WordToStr
  L__WordToStr118
  L__WordToStr119
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros121
  L__WordToStrWithZeros122
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr124
  L__ShortToStr125
  L__ShortToStr126
  L__ShortToStr127
  L_end_IntToStr
  _IntToStr
  L__IntToStr129
  L__IntToStr130
  L__IntToStr131
  L__IntToStr132
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros134
  L__IntToStrWithZeros135
  L__IntToStrWithZeros136
  L__IntToStrWithZeros137
  L__IntToStrWithZeros138
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr140
  L__LongWordToStr141
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros143
  L__LongWordToStrWithZeros144
  L_end_LongToStr
  _LongToStr
  L__LongToStr146
  L__LongToStr147
  L__LongToStr148
  L__LongToStr149
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros151
  L__LongIntToStrWithZeros152
  L__LongIntToStrWithZeros153
  L__LongIntToStrWithZeros154
  L__LongIntToStrWithZeros155
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd157
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim162
  L_end_Ltrim
  _Ltrim
  L__Ltrim164
  L__Ltrim165
  L__Ltrim166
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr168
  L__FloatToStr169
  L__FloatToStr170
  L__FloatToStr171
  L__FloatToStr172
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init_Advanced14
  L_UART2_Write15
  L_UART2_Write16
  L_UART2_Write_Text17
  L_UART2_Write_Text18
  L_UART2_Read_Text19
  L_UART2_Read_Text20
  L_UART2_Read_Text21
  L_UART2_Read_Text22
  L_UART2_Read_Text23
  L_UART2_Read_Text24
  L_UART2_Read_Text25
  L_UART2_Read_Text26
  L_UART2_Read_Text27
  L_UART2_Init28
  L_UART2_Init_Advanced29
  L__UART1_Read_Text30
  L__UART1_Init31
  L__UART1_Init_Advanced32
  L__UART2_Read_Text33
  L__UART2_Init34
  L__UART2_Init_Advanced35
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text38
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text42
  L__UART1_Read_Text43
  L__UART1_Read_Text44
  L__UART1_Read_Text45
  L__UART1_Read_Text46
  L__UART1_Read_Text47
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init50
  L__UART1_Init51
  L__UART1_Init52
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced54
  L__UART1_Init_Advanced55
  L__UART1_Init_Advanced56
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text60
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text64
  L__UART2_Read_Text65
  L__UART2_Read_Text66
  L__UART2_Read_Text67
  L__UART2_Read_Text68
  L__UART2_Read_Text69
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init72
  L__UART2_Init73
  L__UART2_Init74
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced76
  L__UART2_Init_Advanced77
  L__UART2_Init_Advanced78
  L_InitUART0
  L_main2
  L_main3
  L_main4
  L_main6
  L_main8
  L_main10
  L_main11
  L_main12
  L_main14
  L_main16
  L_main17
  L_main18
  L_main19
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L_end_Timer1Int
  _Timer1Int
  L_end_InitPort
  _InitPort
  L_end_InitTimer
  _InitTimer
  L_end_InitDelay
  _InitDelay
  L_end_InitADC
  _InitADC
  L_end_InitVariable
  _InitVariable
  L_end_InitUART
  _InitUART
  L_end_main
  _main
  L__main71
  L__main72
  L__main73
  L__main74
  L__main75
  L__main76
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
