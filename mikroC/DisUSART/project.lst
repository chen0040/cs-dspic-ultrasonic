;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2011-1-30 20:28:08
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040548  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x00052A  	1322
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0548	0x20830F  	MOV	#2096, WREG15
0x054A	0x227FF0  	MOV	#10239, WREG0
0x054C	0xB7A020  	MOV	WREG, SPLIM
0x054E	0x200010  	MOV	#1, WREG0
0x0550	0xB7A034  	MOV	WREG, PSVPAG
0x0552	0x200040  	MOV	#4, WREG0
0x0554	0xB72044  	IOR	CORCON
0x0556	0xFA0010  	LNK	#16
0x0558	0xF80008  	PUSH	WREG4
0x055A	0xF80006  	PUSH	WREG3
0x055C	0x00000002070E  	CALL	1806
;project.c,66 :: 		void main() {                                   // Main Program
;project.c,68 :: 		InitPort();                                   // Initialization
0x0560	0x781F8A  	PUSH	WREG10
0x0562	0x781F8B  	PUSH	WREG11
0x0564	0x07FFDB  	RCALL	_InitPort
;project.c,69 :: 		InitTimer();
0x0566	0x07FF96  	RCALL	_InitTimer
;project.c,70 :: 		InitADC();
0x0568	0x07FFC3  	RCALL	_InitADC
;project.c,71 :: 		InitUSART();
0x056A	0x07FFA1  	RCALL	_InitUSART
;project.c,73 :: 		while(1) {                                    // Unending loop
L_main8:
;project.c,76 :: 		IEC0.T1IE = 1;                            // enable T1 interrupt
0x056C	0xA8608C  	BSET	IEC0, #3
;project.c,77 :: 		Delay_us(100);                            // Software PWM lasts 300us
0x056E	0x2029A7  	MOV	#666, WREG7
L_main10:
0x0570	0xED200E  	DEC	WREG7
0x0572	0x3AFFFE  	BRA NZ	L_main10
0x0574	0x000000  	NOP
0x0576	0x000000  	NOP
;project.c,78 :: 		IEC0.T1IE = 0;                            // disable T1 interrupt
0x0578	0xA9608C  	BCLR	IEC0, #3
;project.c,81 :: 		Delay_ms(1);                              // wait 1ms so piezzo sattles down
0x057A	0x21A0A7  	MOV	#6666, WREG7
L_main12:
0x057C	0xED200E  	DEC	WREG7
0x057E	0x3AFFFE  	BRA NZ	L_main12
0x0580	0x000000  	NOP
0x0582	0x000000  	NOP
;project.c,83 :: 		InitDelay();                              // Start/initialize Timer2 to count Delay
0x0584	0x07FFB7  	RCALL	_InitDelay
;project.c,85 :: 		temp = ADC1_Get_Sample(8);                // get first two samples
0x0586	0x20008A  	MOV	#8, WREG10
0x0588	0x07FFBA  	RCALL	_ADC1_Get_Sample
0x058A	0x884160  	MOV	WREG0, _temp
;project.c,86 :: 		Delay_us(1);
0x058C	0x200067  	MOV	#6, WREG7
L_main14:
0x058E	0xED200E  	DEC	WREG7
0x0590	0x3AFFFE  	BRA NZ	L_main14
0x0592	0x000000  	NOP
0x0594	0x000000  	NOP
;project.c,87 :: 		temp_sec = ADC1_Get_Sample(8);
0x0596	0x20008A  	MOV	#8, WREG10
0x0598	0x07FFB2  	RCALL	_ADC1_Get_Sample
0x059A	0x884120  	MOV	WREG0, _temp_sec
;project.c,89 :: 		InitVariable();                           // Initialization of Variables
0x059C	0x07FF39  	RCALL	_InitVariable
;project.c,91 :: 		while (temp > temp_sec) {                 // check if returned wave is uprising
L_main16:
0x059E	0x804161  	MOV	_temp, WREG1
0x05A0	0x208240  	MOV	#lo_addr(_temp_sec), WREG0
0x05A2	0xE10810  	CP	WREG1, [WREG0]
0x05A4	0x360011  	BRA LEU	L_main17
L__main80:
;project.c,92 :: 		Delay_us(10);                           //   if not check again in 10us
0x05A6	0x200427  	MOV	#66, WREG7
L_main18:
0x05A8	0xED200E  	DEC	WREG7
0x05AA	0x3AFFFE  	BRA NZ	L_main18
0x05AC	0x000000  	NOP
0x05AE	0x000000  	NOP
;project.c,93 :: 		temp = ADC1_Get_Sample(8);
0x05B0	0x20008A  	MOV	#8, WREG10
0x05B2	0x07FFA5  	RCALL	_ADC1_Get_Sample
0x05B4	0x884160  	MOV	WREG0, _temp
;project.c,94 :: 		Delay_us(1);
0x05B6	0x200067  	MOV	#6, WREG7
L_main20:
0x05B8	0xED200E  	DEC	WREG7
0x05BA	0x3AFFFE  	BRA NZ	L_main20
0x05BC	0x000000  	NOP
0x05BE	0x000000  	NOP
;project.c,95 :: 		temp_sec = ADC1_Get_Sample(8);
0x05C0	0x20008A  	MOV	#8, WREG10
0x05C2	0x07FF9D  	RCALL	_ADC1_Get_Sample
0x05C4	0x884120  	MOV	WREG0, _temp_sec
;project.c,96 :: 		}
0x05C6	0x37FFEB  	BRA	L_main16
L_main17:
;project.c,98 :: 		while(abc < 1000) {                       // Measure in lenght of 250ms
L_main22:
0x05C8	0x804141  	MOV	_abc, WREG1
0x05CA	0x203E80  	MOV	#1000, WREG0
0x05CC	0xE10800  	CP	WREG1, WREG0
0x05CE	0x3D0012  	BRA GE	L_main23
L__main81:
;project.c,99 :: 		temp = ADC1_Get_Sample(8);              // get sample
0x05D0	0x20008A  	MOV	#8, WREG10
0x05D2	0x07FF95  	RCALL	_ADC1_Get_Sample
0x05D4	0x884160  	MOV	WREG0, _temp
;project.c,100 :: 		if (temp > temp_old) {                  // if new value is bigger then old
0x05D6	0x208261  	MOV	#lo_addr(_temp_old), WREG1
0x05D8	0xE10011  	CP	WREG0, [WREG1]
0x05DA	0x360004  	BRA LEU	L_main24
L__main82:
;project.c,101 :: 		temp_old = temp;                      //   set value of ADC into temporary variable
0x05DC	0x804160  	MOV	_temp, WREG0
0x05DE	0x884130  	MOV	WREG0, _temp_old
;project.c,102 :: 		time = TMR2;                          //   remember time when value was measured
0x05E0	0xBF8106  	MOV	TMR2, WREG
0x05E2	0x884070  	MOV	WREG0, _time
;project.c,103 :: 		}
L_main24:
;project.c,104 :: 		abc++;
0x05E4	0x200011  	MOV	#1, WREG1
0x05E6	0x208280  	MOV	#lo_addr(_abc), WREG0
0x05E8	0x408810  	ADD	WREG1, [WREG0], [WREG0]
;project.c,105 :: 		Delay_us(50);
0x05EA	0x2014D7  	MOV	#333, WREG7
L_main25:
0x05EC	0xED200E  	DEC	WREG7
0x05EE	0x3AFFFE  	BRA NZ	L_main25
0x05F0	0x000000  	NOP
;project.c,106 :: 		}
0x05F2	0x37FFEA  	BRA	L_main22
L_main23:
;project.c,107 :: 		T2CON.TON = 0;                            // Stop Timer2
0x05F4	0xA9E111  	BCLR	T2CON, #15
;project.c,109 :: 		if (time < 0)                             // absolute value of time
0x05F6	0x804070  	MOV	_time, WREG0
0x05F8	0xE10060  	CP	WREG0, #0
0x05FA	0x310003  	BRA GEU	L_main27
L__main83:
;project.c,110 :: 		time = - time;
0x05FC	0x804071  	MOV	_time, WREG1
0x05FE	0x2080E0  	MOV	#lo_addr(_time), WREG0
0x0600	0x108860  	SUBR	WREG1, #0, [WREG0]
L_main27:
;project.c,113 :: 		if (time < 600)
0x0602	0x804071  	MOV	_time, WREG1
0x0604	0x202580  	MOV	#600, WREG0
0x0606	0xE10800  	CP	WREG1, WREG0
0x0608	0x310006  	BRA GEU	L_main28
L__main84:
;project.c,114 :: 		distance = time / 40;                   //  40
0x060A	0x200282  	MOV	#40, WREG2
0x060C	0x804070  	MOV	_time, WREG0
0x060E	0x090011  	REPEAT	#17
0x0610	0xD88002  	DIV.U	WREG0, WREG2
0x0612	0x884170  	MOV	WREG0, _distance
0x0614	0x370048  	BRA	L_main29
L_main28:
;project.c,115 :: 		else if ((time > 599) && (time < 1200))
0x0616	0x804071  	MOV	_time, WREG1
0x0618	0x202570  	MOV	#599, WREG0
0x061A	0xE10800  	CP	WREG1, WREG0
0x061C	0x36000A  	BRA LEU	L__main60
L__main85:
0x061E	0x804071  	MOV	_time, WREG1
0x0620	0x204B00  	MOV	#1200, WREG0
0x0622	0xE10800  	CP	WREG1, WREG0
0x0624	0x310006  	BRA GEU	L__main59
L__main86:
L__main58:
;project.c,116 :: 		distance = time / 60;                   //  60
0x0626	0x2003C2  	MOV	#60, WREG2
0x0628	0x804070  	MOV	_time, WREG0
0x062A	0x090011  	REPEAT	#17
0x062C	0xD88002  	DIV.U	WREG0, WREG2
0x062E	0x884170  	MOV	WREG0, _distance
0x0630	0x37003A  	BRA	L_main33
;project.c,115 :: 		else if ((time > 599) && (time < 1200))
L__main60:
L__main59:
;project.c,117 :: 		else if ((time > 1199) && (time < 2800))
0x0632	0x804071  	MOV	_time, WREG1
0x0634	0x204AF0  	MOV	#1199, WREG0
0x0636	0xE10800  	CP	WREG1, WREG0
0x0638	0x36000A  	BRA LEU	L__main62
L__main87:
0x063A	0x804071  	MOV	_time, WREG1
0x063C	0x20AF00  	MOV	#2800, WREG0
0x063E	0xE10800  	CP	WREG1, WREG0
0x0640	0x310006  	BRA GEU	L__main61
L__main88:
L__main57:
;project.c,118 :: 		distance = time / 90;                   //  90
0x0642	0x2005A2  	MOV	#90, WREG2
0x0644	0x804070  	MOV	_time, WREG0
0x0646	0x090011  	REPEAT	#17
0x0648	0xD88002  	DIV.U	WREG0, WREG2
0x064A	0x884170  	MOV	WREG0, _distance
0x064C	0x37002C  	BRA	L_main37
;project.c,117 :: 		else if ((time > 1199) && (time < 2800))
L__main62:
L__main61:
;project.c,119 :: 		else if ((time > 2799) && (time < 7200))
0x064E	0x804071  	MOV	_time, WREG1
0x0650	0x20AEF0  	MOV	#2799, WREG0
0x0652	0xE10800  	CP	WREG1, WREG0
0x0654	0x36000A  	BRA LEU	L__main64
L__main89:
0x0656	0x804071  	MOV	_time, WREG1
0x0658	0x21C200  	MOV	#7200, WREG0
0x065A	0xE10800  	CP	WREG1, WREG0
0x065C	0x310006  	BRA GEU	L__main63
L__main90:
L__main56:
;project.c,120 :: 		distance = time / 110;                  // 110
0x065E	0x2006E2  	MOV	#110, WREG2
0x0660	0x804070  	MOV	_time, WREG0
0x0662	0x090011  	REPEAT	#17
0x0664	0xD88002  	DIV.U	WREG0, WREG2
0x0666	0x884170  	MOV	WREG0, _distance
0x0668	0x37001E  	BRA	L_main41
;project.c,119 :: 		else if ((time > 2799) && (time < 7200))
L__main64:
L__main63:
;project.c,121 :: 		else if ((time > 7199) && (time < 20000))
0x066A	0x804071  	MOV	_time, WREG1
0x066C	0x21C1F0  	MOV	#7199, WREG0
0x066E	0xE10800  	CP	WREG1, WREG0
0x0670	0x36000A  	BRA LEU	L__main66
L__main91:
0x0672	0x804071  	MOV	_time, WREG1
0x0674	0x24E200  	MOV	#20000, WREG0
0x0676	0xE10800  	CP	WREG1, WREG0
0x0678	0x310006  	BRA GEU	L__main65
L__main92:
L__main55:
;project.c,122 :: 		distance = time / 125;                  // 125
0x067A	0x2007D2  	MOV	#125, WREG2
0x067C	0x804070  	MOV	_time, WREG0
0x067E	0x090011  	REPEAT	#17
0x0680	0xD88002  	DIV.U	WREG0, WREG2
0x0682	0x884170  	MOV	WREG0, _distance
0x0684	0x370010  	BRA	L_main45
;project.c,121 :: 		else if ((time > 7199) && (time < 20000))
L__main66:
L__main65:
;project.c,123 :: 		else if ((time > 19999) && (time < 35000))
0x0686	0x804071  	MOV	_time, WREG1
0x0688	0x24E1F0  	MOV	#19999, WREG0
0x068A	0xE10800  	CP	WREG1, WREG0
0x068C	0x36000A  	BRA LEU	L__main68
L__main93:
0x068E	0x804071  	MOV	_time, WREG1
0x0690	0x288B80  	MOV	#35000, WREG0
0x0692	0xE10800  	CP	WREG1, WREG0
0x0694	0x310006  	BRA GEU	L__main67
L__main94:
L__main54:
;project.c,124 :: 		distance = time / 135;                  // 135
0x0696	0x200872  	MOV	#135, WREG2
0x0698	0x804070  	MOV	_time, WREG0
0x069A	0x090011  	REPEAT	#17
0x069C	0xD88002  	DIV.U	WREG0, WREG2
0x069E	0x884170  	MOV	WREG0, _distance
0x06A0	0x370002  	BRA	L_main49
;project.c,123 :: 		else if ((time > 19999) && (time < 35000))
L__main68:
L__main67:
;project.c,126 :: 		distance = 0;
0x06A2	0xEF2000  	CLR	WREG0
0x06A4	0x884170  	MOV	WREG0, _distance
L_main49:
L_main45:
L_main41:
L_main37:
L_main33:
L_main29:
;project.c,128 :: 		if (distance == 0) {                      // if distance is 0 the object is too far
0x06A6	0x804170  	MOV	_distance, WREG0
0x06A8	0xE10060  	CP	WREG0, #0
0x06AA	0x3A000F  	BRA NZ	L_main50
L__main95:
;project.c,129 :: 		MySoft_UART_Write("Too Far");
0x06AC	0x4701E0  	ADD	WREG14, #0, WREG3
0x06AE	0x280004  	MOV	#lo_addr(?ICS?lstr1_project), WREG4
0x06B0	0x090007  	REPEAT	#7
0x06B2	0x7859B4  	MOV.B	[WREG4++], [WREG3++]
0x06B4	0x470060  	ADD	WREG14, #0, WREG0
0x06B6	0x780500  	MOV	WREG0, WREG10
0x06B8	0x07FEB2  	RCALL	_MySoft_UART_Write
;project.c,130 :: 		MySoft_UART_Write("|");
0x06BA	0x2007C3  	MOV	#124, WREG3
0x06BC	0x984F03  	MOV.B	WREG3, [WREG14+8]
0x06BE	0x200003  	MOV	#0, WREG3
0x06C0	0x984F13  	MOV.B	WREG3, [WREG14+9]
0x06C2	0x470068  	ADD	WREG14, #8, WREG0
0x06C4	0x780500  	MOV	WREG0, WREG10
0x06C6	0x07FEAB  	RCALL	_MySoft_UART_Write
;project.c,131 :: 		}
0x06C8	0x370017  	BRA	L_main51
L_main50:
;project.c,133 :: 		IntToStr(distance, txt);                // converts time into string
0x06CA	0x20808B  	MOV	#lo_addr(_txt), WREG11
0x06CC	0x80417A  	MOV	_distance, WREG10
0x06CE	0x07FEBA  	RCALL	_IntToStr
;project.c,134 :: 		MySoft_UART_Write(txt);
0x06D0	0x20808A  	MOV	#lo_addr(_txt), WREG10
0x06D2	0x07FEA5  	RCALL	_MySoft_UART_Write
;project.c,135 :: 		MySoft_UART_Write (" cm");               // send value over UART
0x06D4	0x200203  	MOV	#32, WREG3
0x06D6	0x984F23  	MOV.B	WREG3, [WREG14+10]
0x06D8	0x200633  	MOV	#99, WREG3
0x06DA	0x984F33  	MOV.B	WREG3, [WREG14+11]
0x06DC	0x2006D3  	MOV	#109, WREG3
0x06DE	0x984F43  	MOV.B	WREG3, [WREG14+12]
0x06E0	0x200003  	MOV	#0, WREG3
0x06E2	0x984F53  	MOV.B	WREG3, [WREG14+13]
0x06E4	0x47006A  	ADD	WREG14, #10, WREG0
0x06E6	0x780500  	MOV	WREG0, WREG10
0x06E8	0x07FE9A  	RCALL	_MySoft_UART_Write
;project.c,136 :: 		MySoft_UART_Write("|");
0x06EA	0x2007C3  	MOV	#124, WREG3
0x06EC	0x984F63  	MOV.B	WREG3, [WREG14+14]
0x06EE	0x200003  	MOV	#0, WREG3
0x06F0	0x984F73  	MOV.B	WREG3, [WREG14+15]
0x06F2	0x47006E  	ADD	WREG14, #14, WREG0
0x06F4	0x780500  	MOV	WREG0, WREG10
0x06F6	0x07FE93  	RCALL	_MySoft_UART_Write
;project.c,137 :: 		}
L_main51:
;project.c,139 :: 		Delay_ms(500);                              // delay before next measure
0x06F8	0x200338  	MOV	#51, WREG8
0x06FA	0x2DCE57  	MOV	#56549, WREG7
L_main52:
0x06FC	0xED200E  	DEC	WREG7
0x06FE	0x3AFFFE  	BRA NZ	L_main52
0x0700	0xED2010  	DEC	WREG8
0x0702	0x3AFFFC  	BRA NZ	L_main52
;project.c,140 :: 		}
0x0704	0x37FF33  	BRA	L_main8
;project.c,141 :: 		}
L_end_main:
0x0706	0xF90006  	POP	WREG3
0x0708	0xF90008  	POP	WREG4
0x070A	0xFA8000  	ULNK
L__main96:
0x070C	0x37FFFF  	BRA	L__main96
; end of _main
_InitPort:
;project.c,23 :: 		void InitPort(void) {                           // function for initialization of I/O PORTS
;project.c,24 :: 		ADPCFG = 0xFEFF;                              // Configure AN pins as digital except PinB8
0x051C	0x2FEFF0  	MOV	#65279, WREG0
0x051E	0xB7A2A8  	MOV	WREG, ADPCFG
;project.c,25 :: 		TRISC = 0x0000;                               // set PORTC as output
0x0520	0xEF22CC  	CLR	TRISC
;project.c,26 :: 		PORTC = 0x2000;                               // default value of PORTC
0x0522	0x220000  	MOV	#8192, WREG0
0x0524	0xB7A2CE  	MOV	WREG, PORTC
;project.c,27 :: 		TRISB.B8 = 1;                                 // set PinB8 as input
0x0526	0xA802C7  	BSET	TRISB, #8
;project.c,28 :: 		}
L_end_InitPort:
0x0528	0x060000  	RETURN
; end of _InitPort
_InitTimer:
;project.c,30 :: 		void InitTimer(void) {                          // Initialization of Timer1
;project.c,31 :: 		T1CON.B5 = 0;                                 // prescaler 1:1
0x0494	0xA9A104  	BCLR	T1CON, #5
;project.c,32 :: 		T1CON.B4 = 0;
0x0496	0xA98104  	BCLR	T1CON, #4
;project.c,33 :: 		PR1 = (unsigned long)(Get_Fosc_kHz()) * 1000 / (8 * SAMPLE_FREQ);
0x0498	0x07FF6B  	RCALL	_Get_Fosc_kHz
0x049A	0x203E82  	MOV	#1000, WREG2
0x049C	0x200003  	MOV	#0, WREG3
0x049E	0x07FF5F  	RCALL	__Multiply_32x32
0x04A0	0x2E2002  	MOV	#57856, WREG2
0x04A2	0x200043  	MOV	#4, WREG3
0x04A4	0xEB0200  	CLR	WREG4
0x04A6	0x07FF67  	RCALL	__Divide_32x32
0x04A8	0x880810  	MOV	WREG0, PR1
;project.c,34 :: 		TON_bit = 1;                                  // start Timer1
0x04AA	0xA8E105  	BSET	TON_bit, #15
;project.c,35 :: 		}
L_end_InitTimer:
0x04AC	0x060000  	RETURN
; end of _InitTimer
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0370	0x238800  	MOV	#14464, WREG0
0x0372	0x200011  	MOV	#1, WREG1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0374	0x060000  	RETURN
; end of _Get_Fosc_kHz
__Multiply_32x32:
0x035E	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0360	0xB80A02  	MUL.UU	WREG1, WREG2, WREG4
;__Lib_Math.c,47 :: 		
0x0362	0x880050  	MOV	WREG0, WREG5
;__Lib_Math.c,48 :: 		
0x0364	0xB80002  	MUL.UU	WREG0, WREG2, WREG0
;__Lib_Math.c,49 :: 		
0x0366	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,50 :: 		
0x0368	0xB82A03  	MUL.UU	WREG5, WREG3, WREG4
;__Lib_Math.c,51 :: 		
0x036A	0x420081  	ADD	WREG4, WREG1, WREG1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x036C	0xFA8000  	ULNK
0x036E	0x060000  	RETURN
; end of __Multiply_32x32
__Divide_32x32:
0x0376	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0378	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x037A	0x0000000403C4  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x037E	0xE20008  	CP0	WREG4
;__Lib_Math.c,90 :: 		
0x0380	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0382	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0384	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0386	0x689F83  	XOR	WREG1, WREG3, [WREG15++]
;__Lib_Math.c,97 :: 		
0x0388	0xE20002  	CP0	WREG1
;__Lib_Math.c,98 :: 		
0x038A	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x038C	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,100 :: 		
0x038E	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x0390	0xE20006  	CP0	WREG3
;__Lib_Math.c,103 :: 		
0x0392	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0394	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,105 :: 		
0x0396	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0398	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x039A	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,109 :: 		
0x039C	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x039E	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,111 :: 		
0x03A0	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x03A2	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x03A4	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,116 :: 		
0x03A6	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x03A8	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,119 :: 		
0x03AA	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,120 :: 		
0x03AC	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,121 :: 		
0x03AE	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,122 :: 		
0x03B0	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,123 :: 		
0x03B2	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,124 :: 		
0x03B4	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,125 :: 		
0x03B6	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x03B8	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,127 :: 		
0x03BA	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,128 :: 		
0x03BC	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x03BE	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,131 :: 		
0x03C0	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x03C2	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x03C4	0xFA8000  	ULNK
0x03C6	0x060000  	RETURN
; end of __Divide_32x32
_InitADC:
;project.c,44 :: 		void InitADC(void) {                            // Initialization of ADC module
;project.c,45 :: 		ADC1_Init();
0x04F0	0x07FEBE  	RCALL	_ADC1_Init
;project.c,46 :: 		}
L_end_InitADC:
0x04F2	0x060000  	RETURN
; end of _InitADC
_ADC1_Init:
0x026E	0xFA0000  	LNK	#0
;__Lib_ADC_1_p24FJ_p30.c,41 :: 		
;__Lib_ADC_1_p24FJ_p30.c,42 :: 		
0x0270	0x204FE0  	MOV	#lo_addr(_ADC1_Get_Sample), WREG0
0x0272	0x884020  	MOV	WREG0, _ADC_Get_Sample_Ptr
;__Lib_ADC_1_p24FJ_p30.c,44 :: 		
0x0274	0x200E00  	MOV	#224, WREG0
0x0276	0xB7A2A0  	MOV	WREG, ADCON1
;__Lib_ADC_1_p24FJ_p30.c,45 :: 		
0x0278	0xEF22A2  	CLR	ADCON2
;__Lib_ADC_1_p24FJ_p30.c,47 :: 		
0x027A	0x21F3F0  	MOV	#7999, WREG0
0x027C	0xB7A2A4  	MOV	WREG, ADCON3
;__Lib_ADC_1_p24FJ_p30.c,48 :: 		
0x027E	0xEF22AA  	CLR	ADCSSL
;__Lib_ADC_1_p24FJ_p30.c,49 :: 		
0x0280	0xA8E2A1  	BSET	ADCON1, #15
;__Lib_ADC_1_p24FJ_p30.c,50 :: 		
L_end_ADC1_Init:
0x0282	0xFA8000  	ULNK
0x0284	0x060000  	RETURN
; end of _ADC1_Init
_InitUSART:
;project.c,54 :: 		void InitUSART(void) {                           // Initialization of UART1
;project.c,55 :: 		TRISD = 0;              // Set PORTD as output (error signalization)
0x04AE	0x781F8A  	PUSH	WREG10
0x04B0	0x781F8B  	PUSH	WREG11
0x04B2	0x781F8C  	PUSH	WREG12
0x04B4	0xEF22D2  	CLR	TRISD
;project.c,56 :: 		LATD = 0;
0x04B6	0xEF22D6  	CLR	LATD
;project.c,58 :: 		error = Soft_UART_Init(&PORTF, 2, 3, 14400, 0); // Initialize Soft UART at 14400 bps
0x04B8	0x20003C  	MOV	#3, WREG12
0x04BA	0x20002B  	MOV	#2, WREG11
0x04BC	0x202E0A  	MOV	#lo_addr(PORTF), WREG10
0x04BE	0xEF2000  	CLR	WREG0
0x04C0	0x781F80  	PUSH	WREG0
0x04C2	0x238400  	MOV	#14400, WREG0
0x04C4	0x200001  	MOV	#0, WREG1
0x04C6	0xBE9F80  	PUSH.D	WREG0
0x04C8	0x07FE60  	RCALL	_Soft_UART_Init
0x04CA	0xB1006F  	SUB	#6, WREG15
0x04CC	0x2082A1  	MOV	#lo_addr(_error), WREG1
0x04CE	0x784880  	MOV.B	WREG0, [WREG1]
;project.c,59 :: 		if (error > 0) {
0x04D0	0xE10460  	CP.B	WREG0, #0
0x04D2	0x360004  	BRA LEU	L_InitUSART3
L__InitUSART78:
;project.c,60 :: 		LATD = error;                                 // Signalize Init error
0x04D4	0x2082A0  	MOV	#lo_addr(_error), WREG0
0x04D6	0xFB8010  	ZE	[WREG0], WREG0
0x04D8	0xB7A2D6  	MOV	WREG, LATD
;project.c,61 :: 		while(1);                                     // Stop program
L_InitUSART4:
0x04DA	0x37FFFF  	BRA	L_InitUSART4
;project.c,62 :: 		}
L_InitUSART3:
;project.c,63 :: 		Delay_ms(100);
0x04DC	0x2000B8  	MOV	#11, WREG8
0x04DE	0x22C2D7  	MOV	#11309, WREG7
L_InitUSART6:
0x04E0	0xED200E  	DEC	WREG7
0x04E2	0x3AFFFE  	BRA NZ	L_InitUSART6
0x04E4	0xED2010  	DEC	WREG8
0x04E6	0x3AFFFC  	BRA NZ	L_InitUSART6
;project.c,64 :: 		}
L_end_InitUSART:
0x04E8	0x78064F  	POP	WREG12
0x04EA	0x7805CF  	POP	WREG11
0x04EC	0x78054F  	POP	WREG10
0x04EE	0x060000  	RETURN
; end of _InitUSART
_Soft_UART_Init:
0x018A	0xFA0004  	LNK	#4
;__Lib_SoftUART.c,153 :: 		
;__Lib_SoftUART.c,157 :: 		
; baud_rate start address is: 12 (W6)
0x018C	0x97BB3E  	MOV	[WREG14-10], WREG6
0x018E	0x97BBCE  	MOV	[WREG14-8], WREG7
; inverted start address is: 6 (W3)
0x0190	0x97B9AE  	MOV	[WREG14-12], WREG3
0x0192	0x88403A  	MOV	WREG10, __Lib_SoftUART__port_addr
;__Lib_SoftUART.c,158 :: 		
0x0194	0x2081C0  	MOV	#lo_addr(__Lib_SoftUART__lat_addr), WREG0
0x0196	0x450862  	ADD	WREG10, #2, [WREG0]
;__Lib_SoftUART.c,159 :: 		
0x0198	0x200010  	MOV	#1, WREG0
0x019A	0xDD010B  	SL	WREG0, WREG11, WREG2
0x019C	0x8840D2  	MOV	WREG2, __Lib_SoftUART__rx_mask1
;__Lib_SoftUART.c,160 :: 		
0x019E	0x2081E1  	MOV	#lo_addr(__Lib_SoftUART__rx_mask0), WREG1
0x01A0	0x780002  	MOV	WREG2, WREG0
0x01A2	0xEA8880  	COM	WREG0, [WREG1]
;__Lib_SoftUART.c,161 :: 		
0x01A4	0x200010  	MOV	#1, WREG0
0x01A6	0xDD000C  	SL	WREG0, WREG12, WREG0
0x01A8	0x884110  	MOV	WREG0, __Lib_SoftUART__tx_mask1
;__Lib_SoftUART.c,162 :: 		
0x01AA	0x208201  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x01AC	0xEA8880  	COM	WREG0, [WREG1]
;__Lib_SoftUART.c,165 :: 		
0x01AE	0x550062  	SUB	WREG10, #2, WREG0
0x01B0	0x710810  	IOR	WREG2, [WREG0], [WREG0]
;__Lib_SoftUART.c,168 :: 		
0x01B2	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x01B4	0x500162  	SUB	WREG0, #2, WREG2
0x01B6	0x780092  	MOV	[WREG2], WREG1
0x01B8	0x208200  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG0
0x01BA	0x608910  	AND	WREG1, [WREG0], [WREG2]
;__Lib_SoftUART.c,170 :: 		
0x01BC	0xEF2000  	CLR	WREG0
0x01BE	0x8840A0  	MOV	WREG0, __Lib_SoftUART_InvertMaskRd
;__Lib_SoftUART.c,171 :: 		
0x01C0	0xE20006  	CP0	WREG3
0x01C2	0x320002  	BRA Z	L_Soft_UART_Init21
L__Soft_UART_Init45:
; inverted end address is: 6 (W3)
;__Lib_SoftUART.c,172 :: 		
0x01C4	0x208140  	MOV	#lo_addr(__Lib_SoftUART_InvertMaskRd), WREG0
0x01C6	0xEA8810  	COM	[WREG0], [WREG0]
L_Soft_UART_Init21:
;__Lib_SoftUART.c,175 :: 		
0x01C8	0x8040A0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x01CA	0xE10060  	CP	WREG0, #0
0x01CC	0x320006  	BRA Z	L_Soft_UART_Init22
L__Soft_UART_Init46:
;__Lib_SoftUART.c,177 :: 		
0x01CE	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x01D0	0x780110  	MOV	[WREG0], WREG2
0x01D2	0x208201  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x01D4	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x01D6	0x610811  	AND	WREG2, [WREG1], [WREG0]
0x01D8	0x370005  	BRA	L_Soft_UART_Init23
L_Soft_UART_Init22:
;__Lib_SoftUART.c,180 :: 		
0x01DA	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x01DC	0x780110  	MOV	[WREG0], WREG2
0x01DE	0x208221  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x01E0	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x01E2	0x710811  	IOR	WREG2, [WREG1], [WREG0]
L_Soft_UART_Init23:
;__Lib_SoftUART.c,182 :: 		
0x01E4	0x0700C5  	RCALL	_Get_Fosc_kHz
0x01E6	0x203E82  	MOV	#1000, WREG2
0x01E8	0x200003  	MOV	#0, WREG3
0x01EA	0x0700B9  	RCALL	__Multiply_32x32
; q1 start address is: 8 (W4)
0x01EC	0xBE0200  	MOV.D	WREG0, WREG4
;__Lib_SoftUART.c,183 :: 		
0x01EE	0x07FF88  	RCALL	_Get_Fosc_Per_Cyc
0x01F0	0xBE9F84  	PUSH.D	WREG4
; baud_rate end address is: 12 (W6)
0x01F2	0xEB0080  	CLR	WREG1
0x01F4	0xBE0106  	MOV.D	WREG6, WREG2
0x01F6	0x0700B3  	RCALL	__Multiply_32x32
0x01F8	0xBE024F  	POP.D	WREG4
0x01FA	0x980700  	MOV	WREG0, [WREG14+0]
0x01FC	0x980711  	MOV	WREG1, [WREG14+2]
; q2 start address is: 12 (W6)
0x01FE	0x90030E  	MOV	[WREG14+0], WREG6
0x0200	0x90039E  	MOV	[WREG14+2], WREG7
;__Lib_SoftUART.c,185 :: 		
0x0202	0xBE9F82  	PUSH.D	WREG2
0x0204	0x90010E  	MOV	[WREG14+0], WREG2
0x0206	0x90019E  	MOV	[WREG14+2], WREG3
0x0208	0xBE9F86  	PUSH.D	WREG6
0x020A	0xBE9F84  	PUSH.D	WREG4
0x020C	0xBE0004  	MOV.D	WREG4, WREG0
0x020E	0xEB0200  	CLR	WREG4
0x0210	0x0700B2  	RCALL	__Divide_32x32
0x0212	0xBE024F  	POP.D	WREG4
0x0214	0xBE034F  	POP.D	WREG6
0x0216	0xBE014F  	POP.D	WREG2
; temp_long start address is: 16 (W8)
0x0218	0xBE0400  	MOV.D	WREG0, WREG8
;__Lib_SoftUART.c,186 :: 		
0x021A	0x2FFFF2  	MOV	#65535, WREG2
0x021C	0x20FFF3  	MOV	#4095, WREG3
0x021E	0xE10002  	CP	WREG0, WREG2
0x0220	0xE18803  	CPB	WREG1, WREG3
0x0222	0x360002  	BRA LEU	L_Soft_UART_Init24
L__Soft_UART_Init47:
; q1 end address is: 8 (W4)
; q2 end address is: 12 (W6)
; temp_long end address is: 16 (W8)
;__Lib_SoftUART.c,187 :: 		
0x0224	0xB3C020  	MOV.B	#2, WREG0
0x0226	0x370021  	BRA	L_end_Soft_UART_Init
L_Soft_UART_Init24:
;__Lib_SoftUART.c,189 :: 		
; temp_long start address is: 16 (W8)
; q2 start address is: 12 (W6)
; q1 start address is: 8 (W4)
0x0228	0x884088  	MOV	WREG8, __Lib_SoftUART_FullBit
0x022A	0x884099  	MOV	WREG9, __Lib_SoftUART_FullBit+2
; temp_long end address is: 16 (W8)
;__Lib_SoftUART.c,190 :: 		
0x022C	0xBE9F86  	PUSH.D	WREG6
; q1 end address is: 8 (W4)
0x022E	0xBE0004  	MOV.D	WREG4, WREG0
0x0230	0xBE0106  	MOV.D	WREG6, WREG2
0x0232	0xEB0200  	CLR	WREG4
0x0234	0x07FF67  	RCALL	__Modulus_32x32
0x0236	0xBE034F  	POP.D	WREG6
;__Lib_SoftUART.c,192 :: 		
0x0238	0xBE0106  	MOV.D	WREG6, WREG2
0x023A	0xD10183  	LSR	WREG3, WREG3
0x023C	0xD38102  	RRC	WREG2, WREG2
; q2 end address is: 12 (W6)
0x023E	0xE10002  	CP	WREG0, WREG2
0x0240	0xE18803  	CPB	WREG1, WREG3
0x0242	0x360005  	BRA LEU	L_Soft_UART_Init25
L__Soft_UART_Init48:
;__Lib_SoftUART.c,193 :: 		
0x0244	0x200011  	MOV	#1, WREG1
0x0246	0x200002  	MOV	#0, WREG2
0x0248	0x208100  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG0
0x024A	0x409810  	ADD	WREG1, [WREG0], [WREG0++]
0x024C	0x491010  	ADDC	WREG2, [WREG0], [WREG0--]
L_Soft_UART_Init25:
;__Lib_SoftUART.c,196 :: 		
0x024E	0x208100  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG0
0x0250	0xBE0110  	MOV.D	[WREG0], WREG2
0x0252	0xD10183  	LSR	WREG3, WREG3
0x0254	0xD38102  	RRC	WREG2, WREG2
0x0256	0x8840B2  	MOV	WREG2, __Lib_SoftUART_HalfBit
0x0258	0x8840C3  	MOV	WREG3, __Lib_SoftUART_HalfBit+2
;__Lib_SoftUART.c,198 :: 		
0x025A	0x200740  	MOV	#116, WREG0
0x025C	0x200001  	MOV	#0, WREG1
0x025E	0xE11000  	CP	WREG2, WREG0
0x0260	0xE19801  	CPB	WREG3, WREG1
0x0262	0x310002  	BRA GEU	L_Soft_UART_Init26
L__Soft_UART_Init49:
;__Lib_SoftUART.c,199 :: 		
0x0264	0xB3C010  	MOV.B	#1, WREG0
0x0266	0x370001  	BRA	L_end_Soft_UART_Init
L_Soft_UART_Init26:
;__Lib_SoftUART.c,201 :: 		
0x0268	0xEF2000  	CLR	WREG0
;__Lib_SoftUART.c,202 :: 		
L_end_Soft_UART_Init:
0x026A	0xFA8000  	ULNK
0x026C	0x060000  	RETURN
; end of _Soft_UART_Init
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x0100	0x200040  	MOV	#4, WREG0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0102	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
__Modulus_32x32:
0x0104	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0106	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0108	0x000000040158  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x010C	0xE20008  	CP0	WREG4
;__Lib_Math.c,173 :: 		
0x010E	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0110	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0112	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0114	0x781F81  	MOV	WREG1, [WREG15++]
;__Lib_Math.c,180 :: 		
0x0116	0xE20002  	CP0	WREG1
;__Lib_Math.c,181 :: 		
0x0118	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x011A	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,183 :: 		
0x011C	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x011E	0xE20006  	CP0	WREG3
;__Lib_Math.c,186 :: 		
0x0120	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x0122	0x110160  	SUBR	WREG2, #0, WREG2
;__Lib_Math.c,188 :: 		
0x0124	0x1981E0  	SUBBR	WREG3, #0, WREG3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0126	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0128	0xE0004F  	CP0	[--WREG15]
;__Lib_Math.c,192 :: 		
0x012A	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x012C	0x100060  	SUBR	WREG0, #0, WREG0
;__Lib_Math.c,194 :: 		
0x012E	0x1880E0  	SUBBR	WREG1, #0, WREG1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0130	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x0132	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x0134	0xBE8004  	MOV.D	WREG4, WREG0
;__Lib_Math.c,200 :: 		
0x0136	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0138	0xB82260  	MUL.UU	WREG4, #0, WREG4
;__Lib_Math.c,203 :: 		
0x013A	0x200206  	MOV	#32, WREG6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x013C	0xD00000  	SL	WREG0, WREG0
;__Lib_Math.c,206 :: 		
0x013E	0xD28081  	RLC	WREG1, WREG1
;__Lib_Math.c,207 :: 		
0x0140	0xD28204  	RLC	WREG4, WREG4
;__Lib_Math.c,208 :: 		
0x0142	0xD28285  	RLC	WREG5, WREG5
;__Lib_Math.c,209 :: 		
0x0144	0xA80000  	BSET	WREG0, #0
;__Lib_Math.c,210 :: 		
0x0146	0x520202  	SUB	WREG4, WREG2, WREG4
;__Lib_Math.c,211 :: 		
0x0148	0x5A8283  	SUBB	WREG5, WREG3, WREG5
;__Lib_Math.c,212 :: 		
0x014A	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x014C	0x420202  	ADD	WREG4, WREG2, WREG4
;__Lib_Math.c,214 :: 		
0x014E	0x4A8283  	ADDC	WREG5, WREG3, WREG5
;__Lib_Math.c,215 :: 		
0x0150	0xA10000  	BCLR	WREG0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x0152	0xE90306  	DEC	WREG6, WREG6
;__Lib_Math.c,218 :: 		
0x0154	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x0156	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x0158	0xFA8000  	ULNK
0x015A	0x060000  	RETURN
; end of __Modulus_32x32
_InitDelay:
;project.c,37 :: 		void InitDelay(void) {                          // Initialization of Timer2
;project.c,38 :: 		T2CON.B5 = 0;                                 // prescaler 1:8
0x04F4	0xA9A110  	BCLR	T2CON, #5
;project.c,39 :: 		T2CON.B4 = 1;
0x04F6	0xA88110  	BSET	T2CON, #4
;project.c,40 :: 		TMR2 = 0x0000;                                // Initial value of TMR2 register
0x04F8	0xEF2106  	CLR	TMR2
;project.c,41 :: 		T2CON.TON = 1;                                // start Timer2
0x04FA	0xA8E111  	BSET	T2CON, #15
;project.c,42 :: 		}
L_end_InitDelay:
0x04FC	0x060000  	RETURN
; end of _InitDelay
_ADC1_Get_Sample:
0x04FE	0xFA0000  	LNK	#0
;__Lib_ADC_1_p24FJ_p30.c,64 :: 		
;__Lib_ADC_1_p24FJ_p30.c,66 :: 		
0x0500	0x200010  	MOV	#1, WREG0
0x0502	0xDD000A  	SL	WREG0, WREG10, WREG0
0x0504	0xEA8080  	COM	WREG0, WREG1
0x0506	0x202A80  	MOV	#lo_addr(ADPCFG), WREG0
0x0508	0x608810  	AND	WREG1, [WREG0], [WREG0]
;__Lib_ADC_1_p24FJ_p30.c,67 :: 		
0x050A	0x88153A  	MOV	WREG10, ADCHS
;__Lib_ADC_1_p24FJ_p30.c,68 :: 		
0x050C	0xA822A0  	BSET	ADCON1, #1
;__Lib_ADC_1_p24FJ_p30.c,70 :: 		
L_ADC1_Get_Sample0:
0x050E	0xAF02A0  	BTSC	ADCON1, #0
0x0510	0x370001  	BRA	L_ADC1_Get_Sample1
;__Lib_ADC_1_p24FJ_p30.c,71 :: 		
0x0512	0x37FFFD  	BRA	L_ADC1_Get_Sample0
L_ADC1_Get_Sample1:
;__Lib_ADC_1_p24FJ_p30.c,72 :: 		
0x0514	0xA902A0  	BCLR	ADCON1, #0
;__Lib_ADC_1_p24FJ_p30.c,73 :: 		
0x0516	0xBF8280  	MOV	ADCBUF0, WREG
;__Lib_ADC_1_p24FJ_p30.c,74 :: 		
L_end_ADC1_Get_Sample:
0x0518	0xFA8000  	ULNK
0x051A	0x060000  	RETURN
; end of _ADC1_Get_Sample
_InitVariable:
;project.c,48 :: 		void InitVariable(void) {                       // setting initial values
;project.c,49 :: 		abc = 0;
0x0410	0xEF2000  	CLR	WREG0
0x0412	0x884140  	MOV	WREG0, _abc
;project.c,50 :: 		temp_old = 0;
0x0414	0xEF2000  	CLR	WREG0
0x0416	0x884130  	MOV	WREG0, _temp_old
;project.c,51 :: 		distance = 0;
0x0418	0xEF2000  	CLR	WREG0
0x041A	0x884170  	MOV	WREG0, _distance
;project.c,52 :: 		}
L_end_InitVariable:
0x041C	0x060000  	RETURN
; end of _InitVariable
_MySoft_UART_Write:
;project.c,9 :: 		void MySoft_UART_Write(char* message)
;project.c,11 :: 		MySoftUSARTWrite_MessageLen=strlen(message);
0x041E	0x07FF33  	RCALL	_strlen
0x0420	0x884000  	MOV	WREG0, _MySoftUSARTWrite_MessageLen
;project.c,12 :: 		for(MySoftUSARTWrite_MessageIdx=0; MySoftUSARTWrite_MessageIdx < MySoftUSARTWrite_MessageLen; MySoftUSARTWrite_MessageIdx++)
0x0422	0xEF2000  	CLR	WREG0
0x0424	0x884010  	MOV	WREG0, _MySoftUSARTWrite_MessageIdx
L_MySoft_UART_Write0:
0x0426	0x804011  	MOV	_MySoftUSARTWrite_MessageIdx, WREG1
0x0428	0x208000  	MOV	#lo_addr(_MySoftUSARTWrite_MessageLen), WREG0
0x042A	0xE10810  	CP	WREG1, [WREG0]
0x042C	0x3D000A  	BRA GE	L_MySoft_UART_Write1
L__MySoft_UART_Write70:
;project.c,14 :: 		Soft_UART_Write(message[MySoftUSARTWrite_MessageIdx]);
0x042E	0x208020  	MOV	#lo_addr(_MySoftUSARTWrite_MessageIdx), WREG0
0x0430	0x450010  	ADD	WREG10, [WREG0], WREG0
0x0432	0x781F8A  	PUSH	WREG10
0x0434	0x784510  	MOV.B	[WREG0], WREG10
0x0436	0x07FF32  	RCALL	_Soft_UART_Write
0x0438	0x78054F  	POP	WREG10
;project.c,12 :: 		for(MySoftUSARTWrite_MessageIdx=0; MySoftUSARTWrite_MessageIdx < MySoftUSARTWrite_MessageLen; MySoftUSARTWrite_MessageIdx++)
0x043A	0x200011  	MOV	#1, WREG1
0x043C	0x208020  	MOV	#lo_addr(_MySoftUSARTWrite_MessageIdx), WREG0
0x043E	0x408810  	ADD	WREG1, [WREG0], [WREG0]
;project.c,15 :: 		}
0x0440	0x37FFF2  	BRA	L_MySoft_UART_Write0
L_MySoft_UART_Write1:
;project.c,16 :: 		}
L_end_MySoft_UART_Write:
0x0442	0x060000  	RETURN
; end of _MySoft_UART_Write
_strlen:
0x0286	0xFA0000  	LNK	#0
;__Lib_CString.c,144 :: 		
;__Lib_CString.c,147 :: 		
; cp start address is: 2 (W1)
; cp start address is: 2 (W1)
0x0288	0x78008A  	MOV	WREG10, WREG1
; cp end address is: 2 (W1)
; cp end address is: 2 (W1)
;__Lib_CString.c,148 :: 		
L_strlen36:
; cp start address is: 2 (W1)
0x028A	0x780001  	MOV	WREG1, WREG0
; cp start address is: 2 (W1)
0x028C	0xEC2002  	INC	WREG1
; cp end address is: 2 (W1)
0x028E	0xE00410  	CP0.B	[WREG0]
0x0290	0x320001  	BRA Z	L_strlen37
L__strlen131:
;__Lib_CString.c,149 :: 		
0x0292	0x37FFFB  	BRA	L_strlen36
L_strlen37:
;__Lib_CString.c,150 :: 		
0x0294	0x50800A  	SUB	WREG1, WREG10, WREG0
; cp end address is: 2 (W1)
0x0296	0xED2000  	DEC	WREG0
;__Lib_CString.c,151 :: 		
L_end_strlen:
0x0298	0xFA8000  	ULNK
0x029A	0x060000  	RETURN
; end of _strlen
_Soft_UART_Write:
0x029C	0xFA0000  	LNK	#0
;__Lib_SoftUART.c,106 :: 		
;__Lib_SoftUART.c,108 :: 		
0x029E	0x781F8B  	PUSH	WREG11
; mask start address is: 10 (W5)
0x02A0	0xB3C015  	MOV.B	#1, WREG5
;__Lib_SoftUART.c,109 :: 		
0x02A2	0xFB808A  	ZE	WREG10, WREG1
0x02A4	0x208140  	MOV	#lo_addr(__Lib_SoftUART_InvertMaskRd), WREG0
0x02A6	0x688010  	XOR	WREG1, [WREG0], WREG0
0x02A8	0x784500  	MOV.B	WREG0, WREG10
;__Lib_SoftUART.c,112 :: 		
0x02AA	0x8040A0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x02AC	0xE10060  	CP	WREG0, #0
0x02AE	0x320006  	BRA Z	L_Soft_UART_Write13
L__Soft_UART_Write40:
;__Lib_SoftUART.c,114 :: 		
0x02B0	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02B2	0x780110  	MOV	[WREG0], WREG2
0x02B4	0x208221  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x02B6	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x02B8	0x710811  	IOR	WREG2, [WREG1], [WREG0]
0x02BA	0x370005  	BRA	L_Soft_UART_Write14
L_Soft_UART_Write13:
;__Lib_SoftUART.c,117 :: 		
0x02BC	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02BE	0x780110  	MOV	[WREG0], WREG2
0x02C0	0x208201  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x02C2	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x02C4	0x610811  	AND	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write14:
;__Lib_SoftUART.c,119 :: 		
0x02C6	0x200743  	MOV	#116, WREG3
0x02C8	0x200004  	MOV	#0, WREG4
0x02CA	0x208102  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x02CC	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x02CE	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x02D0	0x500062  	SUB	WREG0, #2, WREG0
0x02D2	0x5880E0  	SUBB	WREG1, #0, WREG1
0x02D4	0x781F8A  	PUSH	WREG10
0x02D6	0xBE0500  	MOV.D	WREG0, WREG10
0x02D8	0x07FF41  	RCALL	_Delay_Cyc_Long
0x02DA	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,121 :: 		
0x02DC	0x78400A  	MOV.B	WREG10, WREG0
0x02DE	0xEEE000  	COM.B	WREG0
0x02E0	0x784500  	MOV.B	WREG0, WREG10
; mask end address is: 10 (W5)
0x02E2	0x784185  	MOV.B	WREG5, WREG3
;__Lib_SoftUART.c,123 :: 		
L_Soft_UART_Write15:
; mask start address is: 6 (W3)
0x02E4	0xE24006  	CP0.B	WREG3
0x02E6	0x320021  	BRA Z	L_Soft_UART_Write16
L__Soft_UART_Write41:
;__Lib_SoftUART.c,125 :: 		
0x02E8	0xFB808A  	ZE	WREG10, WREG1
0x02EA	0xFB8003  	ZE	WREG3, WREG0
0x02EC	0x608000  	AND	WREG1, WREG0, WREG0
0x02EE	0x3A0006  	BRA NZ	L_Soft_UART_Write17
L__Soft_UART_Write42:
;__Lib_SoftUART.c,126 :: 		
0x02F0	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02F2	0x780110  	MOV	[WREG0], WREG2
0x02F4	0x208221  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x02F6	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x02F8	0x710811  	IOR	WREG2, [WREG1], [WREG0]
0x02FA	0x370005  	BRA	L_Soft_UART_Write18
L_Soft_UART_Write17:
;__Lib_SoftUART.c,128 :: 		
0x02FC	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x02FE	0x780110  	MOV	[WREG0], WREG2
0x0300	0x208201  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x0302	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0304	0x610811  	AND	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write18:
;__Lib_SoftUART.c,130 :: 		
0x0306	0xFB8003  	ZE	WREG3, WREG0
; mask end address is: 6 (W3)
0x0308	0xDD0041  	SL	WREG0, #1, WREG0
; mask start address is: 10 (W5)
0x030A	0x784280  	MOV.B	WREG0, WREG5
;__Lib_SoftUART.c,133 :: 		
0x030C	0x200743  	MOV	#116, WREG3
0x030E	0x200004  	MOV	#0, WREG4
0x0310	0x208102  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x0312	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x0314	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0316	0x50007A  	SUB	WREG0, #26, WREG0
0x0318	0x5880E0  	SUBB	WREG1, #0, WREG1
0x031A	0x500066  	SUB	WREG0, #6, WREG0
0x031C	0x5880E0  	SUBB	WREG1, #0, WREG1
0x031E	0x781F8A  	PUSH	WREG10
0x0320	0xBE0500  	MOV.D	WREG0, WREG10
0x0322	0x07FF1C  	RCALL	_Delay_Cyc_Long
0x0324	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,137 :: 		
0x0326	0x784185  	MOV.B	WREG5, WREG3
; mask end address is: 10 (W5)
0x0328	0x37FFDD  	BRA	L_Soft_UART_Write15
L_Soft_UART_Write16:
;__Lib_SoftUART.c,140 :: 		
0x032A	0x8040A0  	MOV	__Lib_SoftUART_InvertMaskRd, WREG0
0x032C	0xE10060  	CP	WREG0, #0
0x032E	0x320006  	BRA Z	L_Soft_UART_Write19
L__Soft_UART_Write43:
;__Lib_SoftUART.c,142 :: 		
0x0330	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x0332	0x780110  	MOV	[WREG0], WREG2
0x0334	0x208201  	MOV	#lo_addr(__Lib_SoftUART__tx_mask0), WREG1
0x0336	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0338	0x610811  	AND	WREG2, [WREG1], [WREG0]
0x033A	0x370005  	BRA	L_Soft_UART_Write20
L_Soft_UART_Write19:
;__Lib_SoftUART.c,145 :: 		
0x033C	0x804030  	MOV	__Lib_SoftUART__port_addr, WREG0
0x033E	0x780110  	MOV	[WREG0], WREG2
0x0340	0x208221  	MOV	#lo_addr(__Lib_SoftUART__tx_mask1), WREG1
0x0342	0x8040E0  	MOV	__Lib_SoftUART__lat_addr, WREG0
0x0344	0x710811  	IOR	WREG2, [WREG1], [WREG0]
L_Soft_UART_Write20:
;__Lib_SoftUART.c,147 :: 		
0x0346	0x200743  	MOV	#116, WREG3
0x0348	0x200004  	MOV	#0, WREG4
0x034A	0x208102  	MOV	#lo_addr(__Lib_SoftUART_FullBit), WREG2
0x034C	0x118032  	SUBR	WREG3, [WREG2++], WREG0
0x034E	0x1A00A2  	SUBBR	WREG4, [WREG2--], WREG1
0x0350	0x781F8A  	PUSH	WREG10
0x0352	0xBE0500  	MOV.D	WREG0, WREG10
0x0354	0x07FF03  	RCALL	_Delay_Cyc_Long
0x0356	0x78054F  	POP	WREG10
;__Lib_SoftUART.c,149 :: 		
L_end_Soft_UART_Write:
0x0358	0x7805CF  	POP	WREG11
0x035A	0xFA8000  	ULNK
0x035C	0x060000  	RETURN
; end of _Soft_UART_Write
_Delay_Cyc_Long:
;__Lib_Delays.c,144 :: 		void Delay_Cyc_Long(unsigned long CycNo) {
;__Lib_Delays.c,145 :: 		W8 = CycNo;
0x015C	0x78040A  	MOV	WREG10, WREG8
;__Lib_Delays.c,146 :: 		W9 = HiWord(CycNo);
0x015E	0x200140  	MOV	#lo_addr(WREG10), WREG0
0x0160	0xECA000  	INC2	WREG0
0x0162	0x780490  	MOV	[WREG0], WREG9
;__Lib_Delays.c,148 :: 		PUSH       W8
0x0164	0xF80010  	PUSH	WREG8
;__Lib_Delays.c,150 :: 		MOV        #14, W7                    //   in asm because dsPIC30 can
0x0166	0x2000E7  	MOV	#14, WREG7
;__Lib_Delays.c,151 :: 		Label1:                                   //   generate DO instruction
Label1:
;__Lib_Delays.c,152 :: 		DEC        W7, W7                     //   instead of a loop.
0x0168	0xE90387  	DEC	WREG7, WREG7
;__Lib_Delays.c,153 :: 		BRA LT,    Label2                     //
0x016A	0x350003  	BRA LT	Label2
;__Lib_Delays.c,154 :: 		LSR        W9, W9                     // in that case code execution
0x016C	0xD10489  	LSR	WREG9, WREG9
;__Lib_Delays.c,155 :: 		RRC        W8, W8                     //   time would be different
0x016E	0xD38408  	RRC	WREG8, WREG8
;__Lib_Delays.c,156 :: 		BRA        Label1                     //   between dsPIC30 family
0x0170	0x37FFFB  	BRA	Label1
;__Lib_Delays.c,157 :: 		Label2:                                   //   and PIC24/dsPIC33 families
Label2:
;__Lib_Delays.c,159 :: 		POP        W9
0x0172	0xF90012  	POP	WREG9
;__Lib_Delays.c,160 :: 		MOV        #16383, W7
0x0174	0x23FFF7  	MOV	#16383, WREG7
;__Lib_Delays.c,161 :: 		AND        W9, W7, W9
0x0176	0x648487  	AND	WREG9, WREG7, WREG9
;__Lib_Delays.c,163 :: 		Delay_Cyc_loop:
Delay_Cyc_loop:
;__Lib_Delays.c,164 :: 		CP0 W8                 ; skip delay
0x0178	0xE20010  	CP0	WREG8
;__Lib_Delays.c,165 :: 		BRA Z, Delay_Cyc_rem   ;    if W8 = 0
0x017A	0x320004  	BRA Z	Delay_Cyc_rem
;__Lib_Delays.c,166 :: 		repeat #16377          ; perform delay by
0x017C	0x093FF9  	REPEAT	#16377
;__Lib_Delays.c,167 :: 		NOP                    ;   by executing W8*16384 <nop>s in Delay_Cyc_loop
0x017E	0x000000  	NOP
;__Lib_Delays.c,168 :: 		DEC W8, W8             ; next loop
0x0180	0xE90408  	DEC	WREG8, WREG8
;__Lib_Delays.c,169 :: 		bra Delay_Cyc_loop
0x0182	0x37FFFA  	BRA	Delay_Cyc_loop
;__Lib_Delays.c,170 :: 		Delay_Cyc_rem:
Delay_Cyc_rem:
;__Lib_Delays.c,171 :: 		REPEAT W9              ; execute whats
0x0184	0x098009  	REPEAT	WREG9
;__Lib_Delays.c,172 :: 		nop                    ;   remaining after the division
0x0186	0x000000  	NOP
;__Lib_Delays.c,174 :: 		}
L_end_Delay_Cyc_Long:
0x0188	0x060000  	RETURN
; end of _Delay_Cyc_Long
_IntToStr:
0x0444	0xFA0000  	LNK	#0
;__Lib_Conversions.c,146 :: 		
;__Lib_Conversions.c,152 :: 		
0x0446	0x781F8A  	PUSH	WREG10
; negative start address is: 8 (W4)
0x0448	0xEF2008  	CLR	WREG4
;__Lib_Conversions.c,153 :: 		
; inword start address is: 0 (W0)
0x044A	0x78000A  	MOV	WREG10, WREG0
;__Lib_Conversions.c,154 :: 		
0x044C	0xE15060  	CP	WREG10, #0
0x044E	0x3D0003  	BRA GE	L__IntToStr95
L__IntToStr129:
; inword end address is: 0 (W0)
;__Lib_Conversions.c,155 :: 		
0x0450	0x200014  	MOV	#1, WREG4
;__Lib_Conversions.c,156 :: 		
; inword start address is: 0 (W0)
0x0452	0x150060  	SUBR	WREG10, #0, WREG0
; inword end address is: 0 (W0)
; negative end address is: 8 (W4)
;__Lib_Conversions.c,157 :: 		
0x0454	0x370000  	BRA	L_IntToStr23
L__IntToStr95:
;__Lib_Conversions.c,154 :: 		
;__Lib_Conversions.c,157 :: 		
L_IntToStr23:
;__Lib_Conversions.c,158 :: 		
; inword start address is: 0 (W0)
; negative start address is: 8 (W4)
0x0456	0x780500  	MOV	WREG0, WREG10
; inword end address is: 0 (W0)
0x0458	0x07FFB7  	RCALL	_WordToStr
;__Lib_Conversions.c,160 :: 		
; i start address is: 6 (W3)
; i start address is: 6 (W3)
0x045A	0x200063  	MOV	#6, WREG3
; negative end address is: 8 (W4)
; i end address is: 6 (W3)
; i end address is: 6 (W3)
0x045C	0x780104  	MOV	WREG4, WREG2
;__Lib_Conversions.c,161 :: 		
L_IntToStr24:
; i start address is: 6 (W3)
; negative start address is: 4 (W2)
0x045E	0xE11860  	CP	WREG3, #0
0x0460	0x360006  	BRA LEU	L_IntToStr25
L__IntToStr130:
;__Lib_Conversions.c,162 :: 		
0x0462	0x458083  	ADD	WREG11, WREG3, WREG1
0x0464	0x518061  	SUB	WREG3, #1, WREG0
0x0466	0x458000  	ADD	WREG11, WREG0, WREG0
0x0468	0x784890  	MOV.B	[WREG0], [WREG1]
;__Lib_Conversions.c,163 :: 		
; i start address is: 6 (W3)
0x046A	0xED2006  	DEC	WREG3
; i end address is: 6 (W3)
;__Lib_Conversions.c,164 :: 		
; i end address is: 6 (W3)
0x046C	0x37FFF8  	BRA	L_IntToStr24
L_IntToStr25:
;__Lib_Conversions.c,165 :: 		
0x046E	0xB3C200  	MOV.B	#32, WREG0
0x0470	0x784D80  	MOV.B	WREG0, [WREG11]
;__Lib_Conversions.c,166 :: 		
0x0472	0xE20004  	CP0	WREG2
0x0474	0x32000C  	BRA Z	L_IntToStr26
L__IntToStr131:
; negative end address is: 4 (W2)
;__Lib_Conversions.c,167 :: 		
; i start address is: 4 (W2)
; i start address is: 4 (W2)
0x0476	0xEF2004  	CLR	WREG2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
;__Lib_Conversions.c,168 :: 		
L_IntToStr27:
; i start address is: 4 (W2)
0x0478	0x458002  	ADD	WREG11, WREG2, WREG0
0x047A	0x784090  	MOV.B	[WREG0], WREG1
0x047C	0xB3C200  	MOV.B	#32, WREG0
0x047E	0xE10C00  	CP.B	WREG1, WREG0
0x0480	0x3A0002  	BRA NZ	L_IntToStr28
L__IntToStr132:
; i start address is: 4 (W2)
0x0482	0xEC2004  	INC	WREG2
; i end address is: 4 (W2)
0x0484	0x37FFF9  	BRA	L_IntToStr27
L_IntToStr28:
;__Lib_Conversions.c,169 :: 		
0x0486	0x510061  	SUB	WREG2, #1, WREG0
; i end address is: 4 (W2)
;__Lib_Conversions.c,170 :: 		
0x0488	0x458080  	ADD	WREG11, WREG0, WREG1
0x048A	0xB3C2D0  	MOV.B	#45, WREG0
0x048C	0x784880  	MOV.B	WREG0, [WREG1]
L_IntToStr26:
;__Lib_Conversions.c,171 :: 		
L_end_IntToStr:
0x048E	0x78054F  	POP	WREG10
0x0490	0xFA8000  	ULNK
0x0492	0x060000  	RETURN
; end of _IntToStr
_WordToStr:
0x03C8	0xFA0002  	LNK	#2
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
; len start address is: 4 (W2)
; len start address is: 4 (W2)
0x03CA	0xEF2004  	CLR	WREG2
; len end address is: 4 (W2)
; len end address is: 4 (W2)
L_WordToStr6:
; len start address is: 4 (W2)
0x03CC	0xE11465  	CP.B	WREG2, #5
0x03CE	0x310006  	BRA GEU	L_WordToStr7
L__WordToStr118:
;__Lib_Conversions.c,90 :: 		
0x03D0	0xFB8002  	ZE	WREG2, WREG0
0x03D2	0x458080  	ADD	WREG11, WREG0, WREG1
0x03D4	0xB3C200  	MOV.B	#32, WREG0
0x03D6	0x784880  	MOV.B	WREG0, [WREG1]
;__Lib_Conversions.c,89 :: 		
; len start address is: 4 (W2)
0x03D8	0xEC6004  	INC.B	WREG2
; len end address is: 4 (W2)
;__Lib_Conversions.c,90 :: 		
0x03DA	0x37FFF8  	BRA	L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x03DC	0xFB8002  	ZE	WREG2, WREG0
0x03DE	0x458080  	ADD	WREG11, WREG0, WREG1
0x03E0	0xEF2000  	CLR	WREG0
0x03E2	0x784880  	MOV.B	WREG0, [WREG1]
; len start address is: 6 (W3)
0x03E4	0x5141E1  	SUB.B	WREG2, #1, WREG3
; len end address is: 4 (W2)
; len end address is: 6 (W3)
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
; len start address is: 6 (W3)
;__Lib_Conversions.c,94 :: 		
0x03E6	0xFB8003  	ZE	WREG3, WREG0
0x03E8	0x458000  	ADD	WREG11, WREG0, WREG0
0x03EA	0x980700  	MOV	WREG0, [WREG14+0]
0x03EC	0x2000A2  	MOV	#10, WREG2
0x03EE	0x090011  	REPEAT	#17
0x03F0	0xD88502  	DIV.U	WREG10, WREG2
0x03F2	0x200300  	MOV	#48, WREG0
0x03F4	0x408080  	ADD	WREG1, WREG0, WREG1
0x03F6	0x90000E  	MOV	[WREG14+0], WREG0
0x03F8	0x784801  	MOV.B	WREG1, [WREG0]
;__Lib_Conversions.c,95 :: 		
0x03FA	0x2000A2  	MOV	#10, WREG2
0x03FC	0x090011  	REPEAT	#17
0x03FE	0xD88502  	DIV.U	WREG10, WREG2
0x0400	0x780500  	MOV	WREG0, WREG10
;__Lib_Conversions.c,96 :: 		
0x0402	0xE10060  	CP	WREG0, #0
0x0404	0x3A0001  	BRA NZ	L_WordToStr11
L__WordToStr119:
; len end address is: 6 (W3)
;__Lib_Conversions.c,97 :: 		
0x0406	0x370002  	BRA	L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
; len start address is: 6 (W3)
; len start address is: 6 (W3)
0x0408	0xED6006  	DEC.B	WREG3
; len end address is: 6 (W3)
;__Lib_Conversions.c,99 :: 		
; len end address is: 6 (W3)
0x040A	0x37FFED  	BRA	L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x040C	0xFA8000  	ULNK
0x040E	0x060000  	RETURN
; end of _WordToStr
0x070E	0x208001  	MOV	#lo_addr(_MySoftUSARTWrite_MessageLen), WREG1
0x0710	0x280100  	MOV	#32784, WREG0
0x0712	0x090001  	REPEAT	#1
0x0714	0x7818B0  	MOV	[WREG0++], [WREG1++]
0x0716	0x060000  	RETURN
_Timer1Int:
0x052A	0xF80036  	PUSH	RCOUNT
0x052C	0x781F80  	PUSH	WREG0
0x052E	0x200020  	MOV	#2, WREG0
0x0530	0x09000C  	REPEAT	#12
0x0532	0x781FB0  	PUSH	[WREG0++]
;project.c,18 :: 		void Timer1Int() iv IVT_ADDR_T1INTERRUPT {      // Timer interrupt, sample with 40kHz
;project.c,19 :: 		LATC = ~PORTC;                                // invert PortC for generating signal
0x0534	0x202D01  	MOV	#lo_addr(LATC), WREG1
0x0536	0xBF82CE  	MOV	PORTC, WREG
0x0538	0xEA8880  	COM	WREG0, [WREG1]
;project.c,20 :: 		IFS0.T1IF = 0;                                // clear interrupt flag
0x053A	0xA96084  	BCLR	IFS0, #3
;project.c,21 :: 		}
L_end_Timer1Int:
0x053C	0x2001A0  	MOV	#26, WREG0
0x053E	0x09000C  	REPEAT	#12
0x0540	0x78104F  	POP	[WREG0--]
0x0542	0x78004F  	POP	WREG0
0x0544	0xF90036  	POP	RCOUNT
0x0546	0x064000  	RETFIE
; end of _Timer1Int
;project.c,0 :: ?ICS?lstr1_project [8]
0x8000	0x6F54 ;?ICS?lstr1_project+0
0x8002	0x206F ;?ICS?lstr1_project+2
0x8004	0x6146 ;?ICS?lstr1_project+4
0x8006	0x0072 ;?ICS?lstr1_project+6
; end of ?ICS?lstr1_project
;project.c,0 :: ?ICS?lstr2_project [2]
0x8008	0x007C ;?ICS?lstr2_project+0
; end of ?ICS?lstr2_project
;project.c,0 :: ?ICS?lstr3_project [4]
0x800A	0x6320 ;?ICS?lstr3_project+0
0x800C	0x006D ;?ICS?lstr3_project+2
; end of ?ICS?lstr3_project
;project.c,0 :: ?ICS?lstr4_project [2]
0x800E	0x007C ;?ICS?lstr4_project+0
; end of ?ICS?lstr4_project
;project.c,0 :: ?ICS_MySoftUSARTWrite_MessageLen [2]
0x8010	0x0000 ;?ICS_MySoftUSARTWrite_MessageLen+0
; end of ?ICS_MySoftUSARTWrite_MessageLen
;project.c,0 :: ?ICS_MySoftUSARTWrite_MessageIdx [2]
0x8012	0x0000 ;?ICS_MySoftUSARTWrite_MessageIdx+0
; end of ?ICS_MySoftUSARTWrite_MessageIdx
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100       [4]    _Get_Fosc_Per_Cyc
0x0104      [88]    __Modulus_32x32
0x015C      [46]    _Delay_Cyc_Long
0x018A     [228]    _Soft_UART_Init
0x026E      [24]    _ADC1_Init
0x0286      [22]    _strlen
0x029C     [194]    _Soft_UART_Write
0x035E      [18]    __Multiply_32x32
0x0370       [6]    _Get_Fosc_kHz
0x0376      [82]    __Divide_32x32
0x03C8      [72]    _WordToStr
0x0410      [14]    _InitVariable
0x041E      [38]    _MySoft_UART_Write
0x0444      [80]    _IntToStr
0x0494      [26]    _InitTimer
0x04AE      [66]    _InitUSART
0x04F0       [4]    _InitADC
0x04F4      [10]    _InitDelay
0x04FE      [30]    _ADC1_Get_Sample
0x051C      [14]    _InitPort
0x052A      [30]    _Timer1Int
0x0548     [454]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x02A2       [2]    ADCON2
0x0804       [2]    _ADC_Get_Sample_Ptr
0x02A4       [2]    ADCON3
0x0806       [2]    __Lib_SoftUART__port_addr
0x02AA       [2]    ADCSSL
0x0808       [6]    _txt
0x080E       [2]    _time
0x02A6       [2]    ADCHS
0x0280       [2]    ADCBUF0
0x02A0       [2]    ADCON1
0x0810       [4]    __Lib_SoftUART_FullBit
0x0814       [2]    __Lib_SoftUART_InvertMaskRd
0x0816       [4]    __Lib_SoftUART_HalfBit
0x0084       [2]    IFS0
0x02D0       [2]    LATC
0x081A       [2]    __Lib_SoftUART__rx_mask1
0x081C       [2]    __Lib_SoftUART__lat_addr
0x081E       [2]    __Lib_SoftUART__rx_mask0
0x0820       [2]    __Lib_SoftUART__tx_mask0
0x0822       [2]    __Lib_SoftUART__tx_mask1
0x0824       [2]    _temp_sec
0x0110       [2]    T2CON
0x0106       [2]    TMR2
0x0826       [2]    _temp_old
0x0828       [2]    _abc
0x02D6       [2]    LATD
0x02D2       [2]    TRISD
0x082A       [1]    _error
0x02E0       [2]    PORTF
0x02CE       [2]    PORTC
0x02CC       [2]    TRISC
0x02C6       [2]    TRISB
0x082C       [2]    _temp
0x008C       [2]    IEC0
0x0104       [2]    T1CON
0x082E       [2]    _distance
0x0102       [2]    PR1
0x02A8       [2]    ADPCFG
0x0104       [0]    TON_bit
0x0800       [2]    _MySoftUSARTWrite_MessageLen
0x0802       [2]    _MySoftUSARTWrite_MessageIdx
0x0020       [2]    SPLIM
0x0022       [2]    ACCAL
0x0024       [2]    ACCAH
0x0026       [2]    ACCAU
0x0028       [2]    ACCBL
0x002A       [2]    ACCBH
0x002C       [2]    ACCBU
0x002E       [2]    PCL
0x0030       [2]    PCH
0x0032       [2]    TBLPAG
0x0034       [2]    PSVPAG
0x0036       [2]    RCOUNT
0x0038       [2]    DCOUNT
0x003A       [2]    DOSTARTL
0x003C       [2]    DOSTARTH
0x003E       [2]    DOENDL
0x0040       [2]    DOENDH
0x0042       [2]    SR
0x0044       [2]    CORCON
0x0046       [2]    MODCON
0x0048       [2]    XMODSRT
0x004A       [2]    XMODEND
0x004C       [2]    YMODSRT
0x004E       [2]    YMODEND
0x0050       [2]    XBREV
0x0052       [2]    DISICNT
0x0080       [2]    INTCON1
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x0086       [2]    IFS1
0x0088       [2]    IFS2
0x008C       [2]    IEC0
0x008E       [2]    IEC1
0x0090       [2]    IEC2
0x0094       [2]    IPC0
0x0096       [2]    IPC1
0x0098       [2]    IPC2
0x009A       [2]    IPC3
0x009C       [2]    IPC4
0x009E       [2]    IPC5
0x00A0       [2]    IPC6
0x00A2       [2]    IPC7
0x00A4       [2]    IPC8
0x00A6       [2]    IPC9
0x00A8       [2]    IPC10
0x00B0       [2]    INTTREG
0x00C0       [2]    CNEN1
0x00C2       [2]    CNEN2
0x00C4       [2]    CNPU1
0x00C6       [2]    CNPU2
0x0100       [2]    TMR1
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x0108       [2]    TMR3HLD
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0114       [2]    TMR4
0x0116       [2]    TMR5HLD
0x0118       [2]    TMR5
0x011A       [2]    PR4
0x011C       [2]    PR5
0x011E       [2]    T4CON
0x0120       [2]    T5CON
0x0140       [2]    IC1BUF
0x0142       [2]    IC1CON
0x0144       [2]    IC2BUF
0x0146       [2]    IC2CON
0x0148       [2]    IC3BUF
0x014A       [2]    IC3CON
0x014C       [2]    IC4BUF
0x014E       [2]    IC4CON
0x0150       [2]    IC5BUF
0x0152       [2]    IC5CON
0x0154       [2]    IC6BUF
0x0156       [2]    IC6CON
0x0158       [2]    IC7BUF
0x015A       [2]    IC7CON
0x0014       [4]    FARG_Delay_Cyc_Long_CycNo
0x015C       [2]    IC8BUF
0x015E       [2]    IC8CON
0x0180       [2]    OC1RS
0x0182       [2]    OC1R
0x0184       [2]    OC1CON
0x0186       [2]    OC2RS
0x0188       [2]    OC2R
0x018A       [2]    OC2CON
0x0014       [2]    FARG_Soft_UART_Init_port
0x0016       [2]    FARG_Soft_UART_Init_rx_pin
0x0018       [2]    FARG_Soft_UART_Init_tx_pin
0x018C       [2]    OC3RS
0x018E       [2]    OC3R
0x0190       [2]    OC3CON
0x0192       [2]    OC4RS
0x0194       [2]    OC4R
0x0196       [2]    OC4CON
0x0198       [2]    OC5RS
0x019A       [2]    OC5R
0x019C       [2]    OC5CON
0x019E       [2]    OC6RS
0x01A0       [2]    OC6R
0x01A2       [2]    OC6CON
0x01A4       [2]    OC7RS
0x01A6       [2]    OC7R
0x01A8       [2]    OC7CON
0x01AA       [2]    OC8RS
0x01AC       [2]    OC8R
0x01AE       [2]    OC8CON
0x0200       [2]    I2CRCV
0x0202       [2]    I2CTRN
0x0204       [2]    I2CBRG
0x0206       [2]    I2CCON
0x0208       [2]    I2CSTAT
0x020A       [2]    I2CADD
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0212       [2]    U1RXREG
0x0214       [2]    U1BRG
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x0220       [2]    SPI1STAT
0x0222       [2]    SPI1CON
0x0224       [2]    SPI1BUF
0x0226       [2]    SPI2STAT
0x0228       [2]    SPI2CON
0x022A       [2]    SPI2BUF
0x0240       [2]    DCICON1
0x0242       [2]    DCICON2
0x0244       [2]    DCICON3
0x0246       [2]    DCISTAT
0x0248       [2]    TSCON
0x024C       [2]    RSCON
0x0250       [2]    RXBUF0
0x0252       [2]    RXBUF1
0x0254       [2]    RXBUF2
0x0256       [2]    RXBUF3
0x0258       [2]    TXBUF0
0x025A       [2]    TXBUF1
0x025C       [2]    TXBUF2
0x025E       [2]    TXBUF3
0x0280       [2]    ADCBUF0
0x0282       [2]    ADCBUF1
0x0284       [2]    ADCBUF2
0x0014       [2]    FARG_strlen_s
0x0286       [2]    ADCBUF3
0x0288       [2]    ADCBUF4
0x028A       [2]    ADCBUF5
0x028C       [2]    ADCBUF6
0x028E       [2]    ADCBUF7
0x0290       [2]    ADCBUF8
0x0292       [2]    ADCBUF9
0x0294       [2]    ADCBUFA
0x0296       [2]    ADCBUFB
0x0298       [2]    ADCBUFC
0x029A       [2]    ADCBUFD
0x0014       [1]    FARG_Soft_UART_Write_udata
0x029C       [2]    ADCBUFE
0x029E       [2]    ADCBUFF
0x02A0       [2]    ADCON1
0x02A2       [2]    ADCON2
0x02A4       [2]    ADCON3
0x02A6       [2]    ADCHS
0x02A8       [2]    ADPCFG
0x02AA       [2]    ADCSSL
0x02C0       [2]    TRISA
0x02C2       [2]    PORTA
0x02C4       [2]    LATA
0x02C6       [2]    TRISB
0x02C8       [2]    PORTB
0x02CA       [2]    LATB
0x02CC       [2]    TRISC
0x02CE       [2]    PORTC
0x02D0       [2]    LATC
0x02D2       [2]    TRISD
0x02D4       [2]    PORTD
0x02D6       [2]    LATD
0x02DE       [2]    TRISF
0x02E0       [2]    PORTF
0x02E2       [2]    LATF
0x02E4       [2]    TRISG
0x02E6       [2]    PORTG
0x02E8       [2]    LATG
0x0300       [2]    C1RXF0SID
0x0302       [2]    C1RXF0EIDH
0x0304       [2]    C1RXF0EIDL
0x0308       [2]    C1RXF1SID
0x030A       [2]    C1RXF1EIDH
0x030C       [2]    C1RXF1EIDL
0x0310       [2]    C1RXF2SID
0x0312       [2]    C1RXF2EIDH
0x0314       [2]    C1RXF2EIDL
0x0318       [2]    C1RXF3SID
0x031A       [2]    C1RXF3EIDH
0x031C       [2]    C1RXF3EIDL
0x0320       [2]    C1RXF4SID
0x0322       [2]    C1RXF4EIDH
0x0324       [2]    C1RXF4EIDL
0x0328       [2]    C1RXF5SID
0x032A       [2]    C1RXF5EIDH
0x032C       [2]    C1RXF5EIDL
0x0330       [2]    C1RXM0SID
0x0332       [2]    C1RXM0EIDH
0x0334       [2]    C1RXM0EIDL
0x0338       [2]    C1RXM1SID
0x033A       [2]    C1RXM1EIDH
0x033C       [2]    C1RXM1EIDL
0x0340       [2]    C1TX2SID
0x0342       [2]    C1TX2EID
0x0344       [2]    C1TX2DLC
0x0346       [2]    C1TX2B1
0x0348       [2]    C1TX2B2
0x034A       [2]    C1TX2B3
0x034C       [2]    C1TX2B4
0x034E       [2]    C1TX2CON
0x0350       [2]    C1TX1SID
0x0352       [2]    C1TX1EID
0x0354       [2]    C1TX1DLC
0x0356       [2]    C1TX1B1
0x0358       [2]    C1TX1B2
0x035A       [2]    C1TX1B3
0x035C       [2]    C1TX1B4
0x035E       [2]    C1TX1CON
0x0360       [2]    C1TX0SID
0x0362       [2]    C1TX0EID
0x0364       [2]    C1TX0DLC
0x0366       [2]    C1TX0B1
0x0368       [2]    C1TX0B2
0x036A       [2]    C1TX0B3
0x036C       [2]    C1TX0B4
0x036E       [2]    C1TX0CON
0x0370       [2]    C1RX1SID
0x0372       [2]    C1RX1EID
0x0374       [2]    C1RX1DLC
0x0376       [2]    C1RX1B1
0x0378       [2]    C1RX1B2
0x037A       [2]    C1RX1B3
0x037C       [2]    C1RX1B4
0x037E       [2]    C1RX1CON
0x0380       [2]    C1RX0SID
0x0382       [2]    C1RX0EID
0x0384       [2]    C1RX0DLC
0x0386       [2]    C1RX0B1
0x0388       [2]    C1RX0B2
0x038A       [2]    C1RX0B3
0x038C       [2]    C1RX0B4
0x038E       [2]    C1RX0CON
0x0390       [2]    C1CTRL
0x0392       [2]    C1CFG1
0x0394       [2]    C1CFG2
0x0396       [2]    C1INTF
0x0398       [2]    C1INTE
0x039A       [2]    C1RERRCNT
0x039A       [2]    C1EC
0x03C0       [2]    C2RXF0SID
0x03C2       [2]    C2RXF0EIDH
0x03C4       [2]    C2RXF0EIDL
0x0014       [2]    FARG_WordToStr_input
0x0016       [2]    FARG_WordToStr_output
0x03C8       [2]    C2RXF1SID
0x03CA       [2]    C2RXF1EIDH
0x03CC       [2]    C2RXF1EIDL
0x03D0       [2]    C2RXF2SID
0x03D2       [2]    C2RXF2EIDH
0x03D4       [2]    C2RXF2EIDL
0x03D8       [2]    C2RXF3SID
0x03DA       [2]    C2RXF3EIDH
0x03DC       [2]    C2RXF3EIDL
0x03E0       [2]    C2RXF4SID
0x03E2       [2]    C2RXF4EIDH
0x03E4       [2]    C2RXF4EIDL
0x03E8       [2]    C2RXF5SID
0x03EA       [2]    C2RXF5EIDH
0x03EC       [2]    C2RXF5EIDL
0x03F0       [2]    C2RXM0SID
0x03F2       [2]    C2RXM0EIDH
0x03F4       [2]    C2RXM0EIDL
0x03F8       [2]    C2RXM1SID
0x03FA       [2]    C2RXM1EIDH
0x03FC       [2]    C2RXM1EIDL
0x0400       [2]    C2TX2SID
0x0402       [2]    C2TX2EID
0x0404       [2]    C2TX2DLC
0x0406       [2]    C2TX2B1
0x0408       [2]    C2TX2B2
0x040A       [2]    C2TX2B3
0x040C       [2]    C2TX2B4
0x040E       [2]    C2TX2CON
0x0410       [2]    C2TX1SID
0x0412       [2]    C2TX1EID
0x0414       [2]    C2TX1DLC
0x0416       [2]    C2TX1B1
0x0418       [2]    C2TX1B2
0x041A       [2]    C2TX1B3
0x041C       [2]    C2TX1B4
0x0014       [2]    FARG_MySoft_UART_Write_message
0x041E       [2]    C2TX1CON
0x0420       [2]    C2TX0SID
0x0422       [2]    C2TX0EID
0x0424       [2]    C2TX0DLC
0x0426       [2]    C2TX0B1
0x0428       [2]    C2TX0B2
0x042A       [2]    C2TX0B3
0x042C       [2]    C2TX0B4
0x042E       [2]    C2TX0CON
0x0430       [2]    C2RX1SID
0x0432       [2]    C2RX1EID
0x0434       [2]    C2RX1DLC
0x0436       [2]    C2RX1B1
0x0438       [2]    C2RX1B2
0x043A       [2]    C2RX1B3
0x043C       [2]    C2RX1B4
0x043E       [2]    C2RX1CON
0x0440       [2]    C2RX0SID
0x0442       [2]    C2RX0EID
0x0014       [2]    FARG_IntToStr_input
0x0016       [2]    FARG_IntToStr_output
0x0444       [2]    C2RX0DLC
0x0446       [2]    C2RX0B1
0x0448       [2]    C2RX0B2
0x044A       [2]    C2RX0B3
0x044C       [2]    C2RX0B4
0x044E       [2]    C2RX0CON
0x0450       [2]    C2CTRL
0x0452       [2]    C2CFG1
0x0454       [2]    C2CFG2
0x0456       [2]    C2INTF
0x0458       [2]    C2INTE
0x045A       [2]    C2EC
0x045A       [2]    C2RERRCNT
0x0014       [2]    FARG_ADC1_Get_Sample_channel
0x0740       [2]    RCON
0x0742       [2]    OSCCON
0x0744       [2]    OSCTUN
0x0760       [2]    NVMCON
0x0762       [2]    NVMADR
0x0764       [2]    NVMADRU
0x0766       [2]    NVMKEY
0x0770       [2]    PMD1
0x0772       [2]    PMD2
0x0774       [2]    PMD3
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000       [8]    ?ICS?lstr1_project
0x8008       [2]    ?ICS?lstr2_project
0x800A       [4]    ?ICS?lstr3_project
0x800E       [2]    ?ICS?lstr4_project
0x8010       [2]    ?ICS_MySoftUSARTWrite_MessageLen
0x8012       [2]    ?ICS_MySoftUSARTWrite_MessageIdx
//** Label List: ** 
//----------------------------------------------
  L_MySoft_UART_Write0
  L_MySoft_UART_Write1
  L_MySoft_UART_Write2
  L_InitUSART3
  L_InitUSART4
  L_InitUSART5
  L_InitUSART6
  L_main8
  L_main9
  L_main10
  L_main12
  L_main14
  L_main16
  L_main17
  L_main18
  L_main20
  L_main22
  L_main23
  L_main24
  L_main25
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L_end_MySoft_UART_Write
  _MySoft_UART_Write
  L__MySoft_UART_Write70
  L_end_Timer1Int
  _Timer1Int
  L_end_InitPort
  _InitPort
  L_end_InitTimer
  _InitTimer
  L_end_InitDelay
  _InitDelay
  L_end_InitADC
  _InitADC
  L_end_InitVariable
  _InitVariable
  L_end_InitUSART
  _InitUSART
  L__InitUSART78
  L_end_main
  _main
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main93
  L__main94
  L__main95
  L__main96
  L_ADC1_Get_Sample0
  L_ADC1_Get_Sample1
  L_end_ADC1_Init
  _ADC1_Init
  L_end_ADC1_Init_Advanced
  _ADC1_Init_Advanced
  L_end_ADC1_Get_Sample
  _ADC1_Get_Sample
  L_end_ADC1_Read
  _ADC1_Read
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_LongWordToStr37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStrWithZeros43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongToStr48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongIntToStrWithZeros54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_Dec2Bcd62
  L_Dec2Bcd63
  L_Rtrim64
  L_Rtrim65
  L_Ltrim66
  L_Ltrim67
  L_Ltrim68
  L_Ltrim69
  L_Ltrim70
  L_Ltrim71
  L_FloatToStr72
  L_FloatToStr73
  L_FloatToStr74
  L_FloatToStr75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L__ShortToStr94
  L__IntToStr95
  L__IntToStrWithZeros96
  L__LongToStr97
  L__Ltrim98
  L__Ltrim99
  L__Ltrim100
  L__Ltrim101
  L__FloatToStr102
  L__FloatToStr103
  L__FloatToStr104
  L__FloatToStr105
  L__FloatToStr106
  L__FloatToStr107
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr115
  L__ByteToStr116
  L_end_WordToStr
  _WordToStr
  L__WordToStr118
  L__WordToStr119
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros121
  L__WordToStrWithZeros122
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr124
  L__ShortToStr125
  L__ShortToStr126
  L__ShortToStr127
  L_end_IntToStr
  _IntToStr
  L__IntToStr129
  L__IntToStr130
  L__IntToStr131
  L__IntToStr132
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros134
  L__IntToStrWithZeros135
  L__IntToStrWithZeros136
  L__IntToStrWithZeros137
  L__IntToStrWithZeros138
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr140
  L__LongWordToStr141
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros143
  L__LongWordToStrWithZeros144
  L_end_LongToStr
  _LongToStr
  L__LongToStr146
  L__LongToStr147
  L__LongToStr148
  L__LongToStr149
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros151
  L__LongIntToStrWithZeros152
  L__LongIntToStrWithZeros153
  L__LongIntToStrWithZeros154
  L__LongIntToStrWithZeros155
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd157
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim162
  L_end_Ltrim
  _Ltrim
  L__Ltrim164
  L__Ltrim165
  L__Ltrim166
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr168
  L__FloatToStr169
  L__FloatToStr170
  L__FloatToStr171
  L__FloatToStr172
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L_memchr0
  L_memchr1
  L_memchr2
  L_memchr3
  L_memcmp4
  L_memcmp5
  L_memcmp6
  L_memcpy7
  L_memcpy8
  L_memmove9
  L_memmove10
  L_memmove11
  L_memmove12
  L_memmove13
  L_memmove14
  L_memmove15
  L_memmove16
  L_memmove17
  L_memmove18
  L_memmove19
  L_memset20
  L_memset21
  L_strcat22
  L_strcat23
  L_strcat24
  L_strcat25
  L_strchr26
  L_strchr27
  L_strchr28
  L_strchr29
  L_strcmp30
  L_strcmp31
  L_strcmp32
  L_strcmp33
  L_strcpy34
  L_strcpy35
  L_strlen36
  L_strlen37
  L_strncat38
  L_strncat39
  L_strncat40
  L_strncat41
  L_strncat42
  L_strncat43
  L_strncat44
  L_strncpy45
  L_strncpy46
  L_strncpy47
  L_strncpy48
  L_strncpy49
  L_strspn50
  L_strspn51
  L_strspn52
  L_strspn53
  L_strcspn54
  L_strcspn55
  L_strcspn56
  L_strcspn57
  L_strncmp58
  L_strncmp59
  L_strncmp60
  L_strncmp61
  L_strncmp62
  L_strpbrk63
  L_strpbrk64
  L_strpbrk65
  L_strrchr66
  L_strrchr67
  L_strrchr68
  L_strrchr69
  L_strstr70
  L_strstr71
  L_strstr72
  L_strstr73
  L_strstr74
  L_strtok75
  L_strtok76
  L_strtok77
  L_strtok78
  L_strtok79
  L__memmove80
  L__memmove81
  L__memmove82
  L__strcmp83
  L__strcmp84
  L__strcmp85
  L__strncat86
  L__strncat87
  L__strncat88
  L__strncpy89
  L__strspn90
  L__strspn91
  L__strspn92
  L__strcspn93
  L__strcspn94
  L__strcspn95
  L__strncmp96
  L__strncmp97
  L__strncmp98
  L__strrchr99
  L__strstr100
  L__strstr101
  L__strstr102
  L_end_memchr
  _memchr
  L__memchr104
  L__memchr105
  L_end_memcmp
  _memcmp
  L__memcmp107
  L__memcmp108
  L_end_memcpy
  _memcpy
  L__memcpy110
  L_end_memmove
  _memmove
  L__memmove112
  L__memmove113
  L__memmove114
  L__memmove115
  L__memmove116
  L_end_memset
  _memset
  L__memset118
  L_end_strcat
  _strcat
  L__strcat120
  L__strcat121
  L_end_strchr
  _strchr
  L__strchr123
  L__strchr124
  L_end_strcmp
  _strcmp
  L__strcmp126
  L__strcmp127
  L_end_strcpy
  _strcpy
  L__strcpy129
  L_end_strlen
  _strlen
  L__strlen131
  L_end_strncat
  _strncat
  L__strncat133
  L__strncat134
  L__strncat135
  L__strncat136
  L_end_strncpy
  _strncpy
  L__strncpy138
  L__strncpy139
  L__strncpy140
  L_end_strspn
  _strspn
  L__strspn142
  L__strspn143
  L_end_strcspn
  _strcspn
  L__strcspn145
  L__strcspn146
  L_end_strncmp
  _strncmp
  L__strncmp148
  L__strncmp149
  L__strncmp150
  L_end_strpbrk
  _strpbrk
  L__strpbrk152
  L__strpbrk153
  L_end_strrchr
  _strrchr
  L__strrchr155
  L__strrchr156
  L_end_strstr
  _strstr
  L__strstr158
  L__strstr159
  L__strstr160
  L_end_strtok
  _strtok
  L__strtok162
  L__strtok163
  L__strtok164
  L__strtok165
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_Soft_UART_Read0
  L_Soft_UART_Read1
  L_Soft_UART_Read2
  L_Soft_UART_Read3
  L_Soft_UART_Read4
  L_Soft_UART_Read5
  L_Soft_UART_Read6
  L_Soft_UART_Read7
  L_Soft_UART_Read8
  L_Soft_UART_Read9
  L_Soft_UART_Read10
  L_Soft_UART_Read11
  L_Soft_UART_Read12
  L_Soft_UART_Write13
  L_Soft_UART_Write14
  L_Soft_UART_Write15
  L_Soft_UART_Write16
  L_Soft_UART_Write17
  L_Soft_UART_Write18
  L_Soft_UART_Write19
  L_Soft_UART_Write20
  L_Soft_UART_Init21
  L_Soft_UART_Init22
  L_Soft_UART_Init23
  L_Soft_UART_Init24
  L_Soft_UART_Init25
  L_Soft_UART_Init26
  L_Soft_UART_Init27
  L__Soft_UART_Read28
  L_end_Soft_UART_Break
  _Soft_UART_Break
  L_end_Soft_UART_Read
  _Soft_UART_Read
  L__Soft_UART_Read31
  L__Soft_UART_Read32
  L__Soft_UART_Read33
  L__Soft_UART_Read34
  L__Soft_UART_Read35
  L__Soft_UART_Read36
  L__Soft_UART_Read37
  L__Soft_UART_Read38
  L_end_Soft_UART_Write
  _Soft_UART_Write
  L__Soft_UART_Write40
  L__Soft_UART_Write41
  L__Soft_UART_Write42
  L__Soft_UART_Write43
  L_end_Soft_UART_Init
  _Soft_UART_Init
  L__Soft_UART_Init45
  L__Soft_UART_Init46
  L__Soft_UART_Init47
  L__Soft_UART_Init48
  L__Soft_UART_Init49
  L_MySoft_UART_Write0
  L_MySoft_UART_Write1
  L_MySoft_UART_Write2
  L_InitUSART3
  L_InitUSART4
  L_InitUSART5
  L_InitUSART6
  L_main8
  L_main9
  L_main10
  L_main12
  L_main14
  L_main16
  L_main17
  L_main18
  L_main20
  L_main22
  L_main23
  L_main24
  L_main25
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_main40
  L_main41
  L_main42
  L_main43
  L_main44
  L_main45
  L_main46
  L_main47
  L_main48
  L_main49
  L_main50
  L_main51
  L_main52
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L_end_MySoft_UART_Write
  _MySoft_UART_Write
  L__MySoft_UART_Write70
  L_end_Timer1Int
  _Timer1Int
  L_end_InitPort
  _InitPort
  L_end_InitTimer
  _InitTimer
  L_end_InitDelay
  _InitDelay
  L_end_InitADC
  _InitADC
  L_end_InitVariable
  _InitVariable
  L_end_InitUSART
  _InitUSART
  L__InitUSART78
  L_end_main
  _main
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main93
  L__main94
  L__main95
  L__main96
